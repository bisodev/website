{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview of FRMSc","text":"<p>Migrating from API v1 to API v2?</p> <p>See our Migration from v1 to v2 guide to learn what we have changed in v2 API and how you can use them.</p>"},{"location":"#what-is-frmsc","title":"What is FRMSc","text":"<p>FRMSc are experts in the implementation of fatigue management of safety-critical operations. Our knowledge and expertise, gained over 40 years, have been used to shape regulations best practices and develop a suite of biomathematical models to predict fatigue levels and risks of work schedules. Our models are being used by regulators and organisations worldwide in industries such as aviation, rail, health, and others. Our biomathematical models are validated from real-world scientific studies with targeted data collection specific to different occupations. Our fatigue models incorporate sleep deprivation, circadian rhythm, sleep inertia, workload and job attention. The models predict fatigue risk based on work/rest schedules, job and occupational demands.</p> <p>Our models help identify fatigue and fatigue risk in work schedules, improving safety, operational efficiency and employee wellbeing. The models, which are a data-driven, proactive and flexible approach to managing fatigue, can be used independently, as part of existing regulations or as part of a Fatigue Risk Management System (FRMS).</p>"},{"location":"#how-do-the-models-work","title":"How do the models work?","text":"<p>Our biomathematical models use rosters to predict the fatigue levels and risk of different work schedules. The nature of the occupation dictates what data needs to be uploaded into the different models.</p> <p>In its simplest form, an individual\u2019s work schedule comprises one or more duties over a given period. Each duty has characteristics, such as start and finish date-time and workload. A roster comprises one or more schedules. Roster data is uploaded into the model where our sophisticated, mature algorithms analyse the schedules, construct sleep patterns and predict levels of fatigue and risk, taking into account factors including workload, cumulative fatigue, circadian rhythm and time zone shifts. </p> <p>The models output fatigue scores at regular intervals throughout the duty, allowing scheduling/rostering/crewing managers to assess rosters for fatigue risk.</p>"},{"location":"#what-are-the-models-in-use","title":"What are the models in use?","text":"<p>Our biomathematical fatigue models comprise:</p> <ul> <li>SAFE: Developed in collaboration with the aviation industry, this validated model predicts fatigue and duty risk of pilots for commercial, business, cargo and air taxi operations.</li> <li>CARE: Developed to reflect the specific challenges of cabin crew, this model estimates fatigue and alertness levels of flight attendants.</li> <li>FRI<sup>+</sup>: Upgraded version of the original HSE Fatigue Risk Index which was developed by FRMSc personnel, this model assesses fatigue risk from shift work patterns and is the fatigue model mandated for use by UK Network Rail.</li> <li>FRI <sup>PRO</sup>: Enhanced FRI+ model with advanced features incorporated from the SAFE and CARE models, such as individualised sleep and performance predictions, and fatigue mitigation strategies.</li> </ul>"},{"location":"#safe-for-pilots-use-cases","title":"SAFE for pilots: Use cases","text":"<p>As an airline operator, you are legally bound to adhere to the Flight Time Limitations from your regulator or approved derogations. Your organisation uses a biomathematical model for its safety operations, which are part of its Fatigue Risk Management System (FRMS) or Safety Management System (SMS).</p>"},{"location":"#safe-web-ui","title":"SAFE Web UI","text":"<p>The SAFE web application provides a set of software tools to analyse a schedule of duties for alertness issues.</p> <ul> <li>Upload rosters in Excel or CSV format, matching the SAFE upload template.</li> <li>Analyse the schedule to identify duties with high fatigue and/or risk by viewing the fatigue, sleep reservoirs, and time zone acclimatisation.</li> <li>Proactively identify fatiguing schedules and make changes to the schedules in SAFE to test different scenarios to mitigate fatigue risk.</li> <li>The SAFE algorithms analyse the pilot schedules based on their duty pattern, sector flow, and time zones. They construct a sleep pattern based on the duty schedule, in-flight rest where applicable, and analyse the entire schedule to calculate fatigue scores every 15 minutes while working and the duty risk metric.</li> </ul>"},{"location":"#safe-application-api","title":"SAFE Application API","text":"<p>Automation and integration with existing business processes is possible through the SAFE Application API. </p> <ul> <li>Send roster data from your existing applications and rostering software directly into SAFE for analysis. </li> <li>You can log into your web version of SAFE to view the analysed roster, identify duties with high fatigue and/or risk and view the analysis of fatigue, sleep reservoirs and time zone acclimatisation.</li> <li>Optimized for bulk processing.</li> </ul>"},{"location":"#safe-swift-api","title":"SAFE Swift API","text":"<p>For real-time integration the SAFE Application API may not be fast enough. The SAFE Swift API offers integration with the algorithm, returning fatigue and/or risk scores only so we can deliver results in real-time.</p> <ul> <li>Send roster data from your existing applications and rostering software directly into SAFE for analysis. </li> <li>The SAFE algorithms analyse the pilot schedules taking the same approach as explained above. But, rather than storing the data for viewing and analysis in our web version, the fatigue scores and duty risk metrics are returned to the rostering software for presentation by the third-party rostering software provider.</li> <li>This approach provides a snapshot of maximum fatigue scores and duty risk metric for each duty without providing the detailed analysis and ability to edit the schedules within the web version of SAFE.</li> <li>This approach provides fast analysis and return of fatigue scores and supports near real-time updating of schedules.</li> </ul>"},{"location":"#safe-as-third-party-service-sats","title":"SAFE as Third-party Service (SaTS)","text":"<p>Where your rostering software provider provides it, you can use their interface to access our biomathematical models. This way, you can access fatigue scores calculated by SAFE through your rostering software provider to see the impact of your scheduling decisions on the pilots\u2019 fatigue and the risk levels.</p> <ul> <li>Create your rosters in your rostering software.</li> <li>Your rostering software provider has an integration with us in the backend, which they use to share the roster data with us.</li> <li>The SAFE algorithms analyse the pilot schedules taking the same approaches as explained above. </li> <li>Your rostering software provider receives fatigue and risk information and either shares that information, as is, with you or appends additional information to it before sharing with you.</li> </ul>"},{"location":"#care-for-cabin-crew","title":"CARE for cabin crew","text":"<p>These approaches for pilots using SAFE can be also be applied to cabin crew using CARE.</p>"},{"location":"#storage-integration-solution","title":"Storage Integration Solution","text":"<p>We have also created a storage integration solution that automatically imports rosters into the SAFE model when the roster is dropped to a cloud storage location. For more details on this, please contact us.</p>"},{"location":"API/","title":"SAFE API Reference","text":""},{"location":"activity_spec/","title":"Activity spec","text":"ColumnName(<sup>+</sup> required) Format Description Reference<sup>+</sup> Text A free-text field usually used to indicate a Activity. Use pilot's name or ID. ActivityStartDate<sup>+</sup> Date (DD/MM/YYYY) The activity start date. ActivityStartTime<sup>+</sup> Time (hh:mm) The activity start time. ActivityEndDate<sup>+</sup> Date (DD/MM/YYYY) The activity end date. ActivityEndTime<sup>+</sup> Time (hh:mm) The activity end time. ActivityType<sup>+</sup> Text Send one of the following <ul><li>Check in</li><li>Flight</li><li>Waiting time</li><li>Time at hotel</li><li>Positioning</li><li>Commuting</li><li>Simulator duty</li><li>Ground duty</li><li>Check out</li></ul> Description<sup>+</sup> Text A free text field to explain the activity. TimeReference<sup>+</sup> Number (0-2) Send <ul><li>0 for UTC</li><li>1 for Base</li><li>2 for Local</li></ul> StartAirport<sup>+</sup> Time (hh:mm) The airport at which the activity started. Send ICAO, IATA, or FAA airport codes or a combination of these codes. EndAirport<sup>+</sup> Text The airport at which the activity ended. Send ICAO, IATA, or FAA airport codes or a combination of these codes. Homebase<sup>+</sup> Text The pilot's or the crew member's home airport. Send ICAO, IATA, or FAA airport codes or a combination of these codes. Default value is Start airport code."},{"location":"api_overview/","title":"API Overview","text":""},{"location":"api_overview/#frmsc-safe-apis","title":"FRMSc SAFE APIs","text":"<p>Our API catalogue is a secure way of integrating one of the biomathematical fatigue models suite into your rostering software. By using the API, you can send and receive data from SAFE, CARE and/or the FRI variants without manually inputting the data. This can save you time and effort and ensure that your work schedules are always up to date and compliant with the fatigue risk management standards and best practices.</p> <p>The models can be used for:</p> <ul> <li>Creating and evaluating work schedules</li> <li>Monitoring and managing fatigue levels and risk of your staff</li> <li>Proactive identification and quantification of fatigue risks</li> <li>Making adjustments and improvements to your work schedules</li> <li>Analysis and reporting of fatigue Safety Performance Indicators</li> <li>Retrospective analysis of fatigue incidents based on actual duty and sleep achieved</li> </ul> <p>The FRMSc SAFE APIs can also be customised to suit your specific needs and preferences. Currently, FRMSc SAFE supports two APIs. Learn more about the workflow for each of these APIs.</p> <ul> <li>SAFE App API</li> <li>SAFE Swift API</li> </ul>"},{"location":"api_rapid/","title":"Api rapid","text":""},{"location":"bearer_tutorial/","title":"How to generate a bearer token?","text":"<p>Download the C#.NET examples for SAFE APIs with helper library</p>"},{"location":"bearer_tutorial/#when-to-generate-a-bearer-token","title":"When to generate a bearer token?","text":"<p>You must generate a bearer token before using any SAFE web APIs. The access (bearer) token is used to authenticate and authorize the requests made to SAFE Application or SAFE Swift web APIs.</p>"},{"location":"bearer_tutorial/#how-to-generate-a-bearer-token","title":"How to generate a bearer token?","text":"<p>This code snippet is written in C# and it is used to obtain an access (bearer) token from the FRMSC SAFE Token API. This API is part of Client Credentials flow of OAuth2.0 specification. The program uses the following libraries: </p> <ul> <li><code>IdentityModel.Client</code></li> <li><code>Newtonsoft.Json</code></li> <li><code>Safe_API_Demo_Client.Models</code></li> <li><code>System.Text</code> </li> </ul> <p>Here are the steps to follow:</p>"},{"location":"bearer_tutorial/#step-1-set-the-variable-values","title":"Step 1: Set the variable values","text":"<p>Set the <code>identityUrl</code>, <code>clientId</code>, <code>clientSecret</code>, and <code>scope</code> variables to their respective values. </p> <pre><code>var identityUrl = \"https://identity-eu.frmsc.com\";\nvar clientId = \"[Your_ClientId]\";\nvar clientSecret = \"[your_ClientSecret]\";\nvar scope = \"frmsc_safe_upload_api\";\n</code></pre> <ul> <li>The <code>identityUrl</code> variable should be set to the URL of the identity (token) server. </li> <li>The <code>clientId</code> and <code>clientSecret</code> variables should be set to the client ID and client secret you can generate from FRMSc web app. </li> <li>The <code>scope</code> variable should be set to the scope of the API you want to access. FRMSc APIs support two scopes - <code>frmsc_safe_upload_api</code> and <code>frmsc_fast_safe_api</code>. Set the <code>scope</code> to: <ul><li><code>frmsc_safe_upload_api</code> for FRMSc's SAFE Application API, and</li><li><code>frmsc_fast_safe_api</code> for FRMSc's SAFE Swift API <code>/api/Processor/ProcessFatigue</code> endpoint</li><li><code>frmsc_fast_safe_risk_api</code> for FRMSc's SAFE Swift API <code>/api/Processor/ProcessFatigueRisk</code> endpoint</li></ul></li> </ul>"},{"location":"bearer_tutorial/#step-2-initiate-request","title":"Step 2: Initiate request","text":"<p>Create an instance of the <code>HttpClient</code> class and set its <code>BaseAddress</code> property to the value of the <code>identityUrl</code>.</p> <pre><code>HttpClient client = new HttpClient();\nclient.BaseAddress = new Uri(identityUrl);\n</code></pre>"},{"location":"bearer_tutorial/#step-3-inititiaze-open-id","title":"Step 3: Inititiaze Open ID","text":"<p>Call the <code>GetDiscoveryDocumentAsync</code> method of the <code>HttpClient</code> instance to retrieve the OpenID Connect discovery document for the identity server. This document contains information about the endpoints and configuration of the identity server.</p> <pre><code>var openIdDiscoveryDocument = client.GetDiscoveryDocumentAsync(identityUrl).GetAwaiter().GetResult();\n</code></pre>"},{"location":"bearer_tutorial/#step-4-create-request-body","title":"Step 4: Create request body","text":"<p>Create a new instance of the <code>ClientCredentialsTokenRequest</code> class and set its properties to the values of <code>openIdDiscoveryDocument.TokenEndpoint</code>, <code>clientId</code>, <code>clientSecret</code>, and <code>scope</code>. The <code>grant_type</code> is pre-set in the OpenID Connect discovery document.</p> <pre><code>var request = new ClientCredentialsTokenRequest\n{\n    Address = openIdDiscoveryDocument.TokenEndpoint,\n\n    ClientId = clientId,\n    ClientSecret = clientSecret,\n    Scope = scope\n};\n</code></pre>"},{"location":"bearer_tutorial/#step-5-send-the-request","title":"Step 5: Send the request","text":"<p>Call the <code>RequestClientCredentialsTokenAsync</code> method of the <code>HttpClient</code> instance with the <code>ClientCredentialsTokenRequest</code> instance as a parameter to obtain an access (bearer) token.</p> <pre><code>var tokenResponse = await client.RequestClientCredentialsTokenAsync(request);\nif (tokenResponse != null)\n{\n    return tokenResponse.AccessToken;\n}\nelse\n{\n    Console.WriteLine(\"Authentication failed\");\n    throw new Exception(\"Authentication failed\");\n}\n</code></pre> <p>If the <code>tokenResponse</code> object is not null, return the <code>AccessToken</code> property of the tokenResponse object. Otherwise, print <code>Authentication failed</code> to the console and throw an exception.</p>"},{"location":"bearer_tutorial/#complete-code","title":"Complete Code","text":"<pre><code>using IdentityModel.Client;\nusing Newtonsoft.Json;\nusing Safe_API_Demo_Client.Models;\nusing System.Text;\n\nnamespace Safe_API_Demo_Client\n{\n    public static class Identity\n    {\n        public static async void Run()\n        {\n            var identityUrl = \"https://identity-eu.frmsc.com\";            \n\n            var clientId = \"[Your_ClientId]\";\n            var clientSecret = \"[your_ClientSecret]\";\n            var scope = \"frmsc_safe_upload_api\";\n            var accessToken = await Authenticate(identityUrl, clientId, clientSecret, \"frmsc_fast_safe_api\");\n\n        }\n\n        static async Task&lt;string&gt; Authenticate(string identityUrl, string clientId, string clientSecret, string scope)\n        {\n            HttpClient client = new HttpClient();\n            client.BaseAddress = new Uri(identityUrl);\n\n            var openIdDiscoveryDocument = client.GetDiscoveryDocumentAsync(identityUrl).GetAwaiter().GetResult();\n\n            var request = new ClientCredentialsTokenRequest\n            {\n                Address = openIdDiscoveryDocument.TokenEndpoint,\n\n                ClientId = clientId,\n                ClientSecret = clientSecret,\n                Scope = scope\n            };\n\n            var tokenResponse = await client.RequestClientCredentialsTokenAsync(request);\n            if (tokenResponse != null)\n            {\n                return tokenResponse.AccessToken;\n            }\n            else\n            {\n                Console.WriteLine(\"Authentication failed\");\n                throw new Exception(\"Authentication failed\");\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"duty_spec/","title":"Duty spec","text":"ColumnName(<sup>+</sup> required) Format Description Reference<sup>+</sup> Text A free-text field usually used to indicate a pilot. Use pilot's name or ID. OnDutyDate<sup>+</sup> Date (DD/MM/YYYY) The duty start date. OnDutyTime<sup>+</sup> Time (hh:mm) The duty start time. StartAirport<sup>+</sup> Text The airport at which the duty started. Send ICAO, IATA, or FAA airport codes or a combination of these codes. OffDutyDate<sup>+</sup> Date (DD/MM/YYYY) The duty end date. OffDutyTime<sup>+</sup> Time (hh:mm) The duty end time. EndAirport<sup>+</sup> Text The airport at which the duty ended. Send ICAO, IATA, or FAA airport codes or a combination of these codes. Sectors Number The number of flights in duty. Default value is 1. CrewComposition Number Send <ul><li>2 for 2 Pilots</li><li>3 for 3 Pilots</li><li>4 for 4 Pilots</li><li>9 for Cabin Crew</li></ul>Default value is 2. SleepCount Number (0-2) The number of sleeps the pilot or the crew member slept on duty. SleepOrder Number (1-3) The rank, which the pilot or the crew member slept in. Send <ul><li>1 for First</li><li>2 for Second</li><li>3 for Third</li></ul> SleepClass Number (1-5) Send <ul><li>1 for Class 1 - Bunk</li><li>2 for Class 2 - Cabin seat: 40 degrees or more recline</li><li>3 for Class 3 - Flight deck seat</li><li>4 for Class 4 - Economy seat: Less than 40 degrees recline</li><li>5 for Class 5 - Jump seat</li></ul> HomeBase<sup>+</sup> Text Send ICAO, IATA, or FAA airport codes or a combination of these codes. Default value is Start airport code. TimeReference<sup>+</sup> Number (0-2) The reference time zone. Send <ul><li>0 for UTC</li><li>1 for Base airport timezone</li><li>2 for Local timezone</li></ul> OnPartialAugmentDate Date (DD/MM/YYYY) The time on which the pilot or the crew member started their partial agumentation. OnPartialAugmentTime Time (hh:mm) The time at which the pilot or the crew member started their partial agumentation. OffPartialAugmentDate Date (DD/MM/YYYY) The date on which the pilot or the crew member ended their partial agumentation. OffPartialAugmentTime Time (hh:mm) The time at which the pilot or the crew member ended their partial agumentation. FirstRestStartDate Date (DD/MM/YYYY) The date on which the pilot or the crew member started their first rest. FirstRestStartTime Time (hh:mm) The time at which the pilot or the crew member started their first rest. FirstRestEndDate Date (DD/MM/YYYY) The date on which the pilot or the crew member ended their first rest. FirstRestEndTime Time (hh:mm) The time at which the pilot or the crew member ended their first rest. SecondRestStartDate Date (DD/MM/YYYY) The date on which the pilot or the crew member started their second rest. SecondRestStartTime Time (hh:mm) The time at which the pilot or the crew member started their second rest. SecondRestEndDate Date (DD/MM/YYYY) The date on which the pilot or the crew member ended their second rest. SecondRestEndTime Time (hh:mm) The time at which the pilot or the crew member ended their second rest. SplitShift Number (0-1) Indicates whether the pilot or crew member had rested in between flight. Send <ul><li>0 for True</li><li>1 for False</li></ul> DutyType Number (1-3) The type of duty. Send <ul><li>1 for active</li><li>2 for active - split shift</li><li>3 for standby duty</li></ul> Fleet Text A free-text field used to indicate fleet message. Rank Text A free-text field used to indicate a pilot's rank. Workload Number When the sector count is 0, send <ul><li>0 for no activity, i.e. doing nothing but not sleeping</li><li>10 for average workload on a typical single-sector duty. Equivalent to workload prior to being able to change workload</li><li>20 for average workload on a typical four-sector duty</li><li>30 for very high workloads</li><li>40 for exceptionally high workloads only seen occassionally</li><li>50 for extremely high workloads only rarely seen</li></ul>When the sector count is more than 0, send <ul><li>-50 for half the workload of standard flying this number of sectors</li><li>0 for standard duty workloads flying this number of sectors. Equivalent to workload prior to being able to change workload</li><li>100 for double the workload of standard flying this number of sectors</li></ul> CrewPrepTime Number The time taken for crew to prepare. Value indicates minutes. Default value is 60 minutes. DutyCommuteTime Number The time taken to commute to the duty. Value indicates minutes. Default value is 60 minutes."},{"location":"errors/","title":"Troubleshooting","text":""},{"location":"errors/#api-related-faqs","title":"API related FAQs","text":"How do you read the API errors? <p>Each error contains 3 pieces of information separated by a | symbol. </p> <ul> <li>The first part shows you the row within the CSV where the error occurred. </li> <li>The second part shows the schedule, which the error is for, and </li> <li>The third part shows the error message.</li> </ul> <p>Example response error</p> <pre><code>{\n  \"errors\":[\"6|Pilot1|The 'Off duty date' (1/2/2015 2:00 PM) cannot be more than 30 hours after the 'On duty date' (1/1/2015 1:53 AM).\"]\n}\n</code></pre> Why is my API request not returning any response? <p>Not all SAFE APIs will return a response. Here is a list of APIs that will return a response.</p> <ol> <li><code>Token</code> API returns bearer token</li> <li><code>UploadRoster</code> endpoint returns a roster token if the upload was successful</li> <li><code>GetResults</code> endpoint returns error messages and fatigue scores.</li> <li><code>ProcessFatigue</code> endpoint returns fatigue scores.</li> <li><code>ProcessFatigueRisk</code> endpoint returns fatigue risk scores.</li> </ol> <p>If these endpoints are not returning any response, more than likely, the payload you have sent to these endpoints is invalid or missing a mandatory field. Recheck the payload to confirm that the payload holds correct data.</p> <p>If the problem persists, contact our support team with a raw trace of request and response.</p> <code>UploadRoster</code> endpoint is not showing errors in the file. How do we resolve the errors? <p><code>UploadRoster</code> does not display errors. If you get a roster token from <code>UploadRoster</code> endpoint, your roster data was uploaded correctly.</p> <p>But you still need to use the <code>GetResults</code> endpoint to verify if the data is valid. This is how you can check for errors in your uploaded roster data.</p> <ol> <li>Call the <code>GetResults</code> endpoint by setting the <code>dataKey</code> parameter to <code>status</code>.</li> <li>If the response is not <code>completedsuccessfully</code>, call the <code>GetResults</code> endpoint again, but this time set the <code>dataKey</code> parameter to <code>feedback</code>. You should be able to view any errors in the uploaded data.</li> </ol> I keep getting 401 error when sending requests to the API. How to resolve? <p>401 errors happen when the client ID, the client secret, or the bearer token you used is incorrect. Make sure you copy the right client ID and client secret from the web UI to get a bearer token.</p> <p>If you still get 401 error after copying the right client secret and client ID from the web UI, reload the page and copy the secret again. Your client ID will stay the same.</p> <p>If the issue is not fixed, email our support team with a raw trace of request and response.</p> What is base64 encoding and how do you encode client ID and client secret using base64 encoding? <p>It is binary to a text encoding scheme that represents binary data in an American Standard Code for Information Interchange (ASCII) string format.</p> <p>Most platforms that allow using APIs will automatically convert your string of <code>&lt;ClientID&gt;:&lt;ClientSecret&gt;</code> to base64. If they don't, you can use online tools to help you with that.</p> I keep getting a 500 error when sending requests to the API. How to resolve? <p>500 errors occur when our server cannot process the data you sent in the API request. Make sure you include all the required fields in the request body or parameters.</p> <p>If the error continues, make sure you use valid values for the fields and parameters. You can find the schema description in our API reference documentation to see the required fields and parameters and their valid values. You can also look at the Schema sections of the SAFE Application API and SAFE Swift API to understand the fields and their values.</p> <p>If the issue is not resolved, email our support team with a raw trace of request and response.</p> What is the format for <code>RosterData</code> and <code>ActivityData</code> properties? <p><code>RosterData</code> and <code>ActivityData</code> accept CSV data in JSON format. You can include multiple rows of data in these properties. For more information on the CSV columns, see our API reference documentation or the Schema sections of the SAFE Application API and SAFE Swift API.</p> <p> To create a new row in JSON format, do not press the Enter \u23ce key. Use <code>\\r\\n</code> (with no spaces around it) to separate the rows for <code>RosterData</code> and <code>ActivityData</code>.</p> What do the fatigue scores mean? How to read them? <p>Each comma-separated value indicates a fatigue score (based on the scale you chose) at 15-minute intervals. Refer to the Results Breakdown page to learn more about what each of those scores mean.</p> I am preparing the payload for Roster and Activity data, but I don't know how to send multi-line data. <p>To create a new row for <code>RosterData</code> and <code>ActivityData</code>, do not use the Enter \u23ce key as it will not work. Use <code>\\r\\n</code> (with no spaces before or after) to separate the rows of <code>RosterData</code> and <code>ActivityData</code>.</p> There are multiple authorization methods in API reference. Which should I choose? <p>Our API uses OAuth2.0 for authentication, which is the preferred option for testing our APIs in the API reference documentation. Bearer and basic authentication methods are simplified implementation of OAuth2.0.</p> The basic authorization method asks for username and password. There is no place to enter Client ID and Client Secret. <p>Basic Authorization methods require a username and a password as per the Open API 3.0 specification that we adhere to.</p> <p>For basic authorization, use Client ID as the username and Client Secret as the password.</p> I tried everything but couldn't resolve the errors. I need to contact support. <p>For support, please email us at support@frmsc.com. To speed up the troubleshooting process, please attach the raw trace of request and response to your email. You can find the raw trace of the API request in the console of your API testing tool or your browser window. Here is a sample of raw trace (from Postman console):</p> <pre><code>  POST /api/Processor/ProcessFatigue HTTP/1.1\n  Content-Type: application/json\n  Authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCP6IjBFNUMxNEU4OEIzRjFFMEFCNDlGNUIzMkU5NzNDMDQ0NkY0MjJDRURSUzI1NiIsInR5cCI6ImF0K2p3dCIsIng1dCI6IkRsd1U2SXNfSGdxMG4xc3k2WFBBUkc5Q0xPMCJ9.eyJuYmYiOjE3MDYwMDMzNzYsImV4cCI6MTcwNjAwNjk3NiwiaXNzIjoiaHR0cHM6Ly9pZGVudGl0eS1ldS5mcm1zYy5jb20iLCJhdWQiOiJmcm1zY19mYXN0X3NhZmVfcmlza19hcGkiLCJjbGllbnRfaWQiOiI1NDcxRTAxMC1EREVFLTRDOTgtRkY4Ri0wOERCMjI0NUUzNzIiLCJqdGkiOiIyQUNCMDRFMzFGQkJFN0ZEMDc0RTEwRUEzOTJBNDBENCIsImlhdCI6MTcwNjAwMzM3Niwic2NvcGUiOlsiZnJtc2NfZmFzdF9zYWZlX3Jpc2tfYXBpIl19.gD9a-kjilX-uQ6ashWX6dTSFaGhKFqVujkyb1R8Zq4jNnH4pL5Omq4rBB8wPt3fvps_WBXRuG7ZrDnoth2HaTNMwgEeH9sdZR9xiWlkmhdXiXasUWTR_iAcW_a68bCMiGKPT5STSiIkO-hrPwDFni-fIg5LjAHUvmEZ6n4EtmiAyU1sSG939qFM6p6FK9GIZkAp9fStyqZF7PNK7djOCvv6_NNZXypmM88TL3_naVkE1aH4BPecjUhwECTzmxmkt8lcCx658IHBPAeXS3a6rlo3cFKosWsb08cVgYutn4I764-8CMTTNp1umWeYWVWl9YbxV_ynNTI7VNlOJLCZwaw\n  User-Agent: PostmanRuntime/7.36.1\n  Accept: */*\n  Cache-Control: no-cache\n  Postman-Token: 3525292c-2e40-47b3-9ea6-f2ad4ec930e1\n  Host: api-eu.frmsc.com\n  Accept-Encoding: gzip, deflate, br\n  Connection: keep-alive\n  Cookie: ARRAffinity=c349e3b3a841e0f145827e7b45147850448801356063dc14e966fbfa5b7979c5; ARRAffinitySameSite=c349e3b3a841e0f145827e7b45147850448801356063dc14e966fbfa5b7979c5\n\n  {\n  \"RosterData\": \"Pilot1,12/05/2023,19:45,SNA,13/05/2023,04:07,RSW,SNA,2\",\n  \"SleepData\": [\n  {\n  \"ScheduleName\": \"Pilot 1\",\n  \"SleepStart\": \"2023-01-02T19:57:00Z\",\n  \"SleepEnd\": \"2023-01-02T20:30:00Z\"\n  }\n  ],\n  \"DateFormat\": \"dmy\",\n  \"PreferredScale\": \"SP\"\n  }\n\n  HTTP/1.1 403 Forbidden\n  Content-Length: 0\n  Date: Tue, 23 Jan 2024 09:51:07 GMT\n  Server: Microsoft-IIS/10.0\n  Request-Context: appId=cid-v1:b5aa80b1-72af-42a2-bc7b-e827ba340897\n  X-Powered-By: ASP.NET\n</code></pre>"},{"location":"errors/#web-ui-related-faqs","title":"Web UI related FAQs","text":"I don't see a button to add activity through UI. <p>There are no main menu buttons to add activity to a duty. Instead, right-click on the duty to which you want to add the activity and choose Activity from the context menu. See our UI workflow for step-by-step instructions to add activity.</p> When uploading duty and activity, I get errors, but I don't see how to resolve them. <p>When you bulk upload the schedule, you won't be able to resolve the errors from UI. You must return to the CSV file and resolve the error shown in the UI. </p> <p>Then, delete the roster with faulty data and re-upload the schedule.</p>"},{"location":"fast_api_tutorial/","title":"How to use SAFE Swift API?","text":"<p>Download the C#.NET examples for SAFE APIs with helper library</p>"},{"location":"fast_api_tutorial/#when-to-use-safe-swift-api","title":"When to use SAFE Swift API?","text":"<p>As the name suggests, the SAFE Swift API produces the result quickly. Unlike the SAFE Application API, it doesn't keep a copy of your uploaded roster data in the SAFE web app. So, you won't be able to view the uploaded roster in the future. This API, however, delivers fatigue score and fatigue risk score as response from the same the endpoints you use to send the roster data. Use this API to quickly generate fatigue score and fatigue risk score from the roster data.</p>"},{"location":"fast_api_tutorial/#how-to-work-with-the-api","title":"How to work with the API?","text":"<p>This code snippet is written in C# and it is used to upload roster data to the FRMSC SAFE Swift API and get results from the API. The program uses the following libraries: </p> <ul> <li><code>IdentityModel.Client</code></li> <li><code>Safe_API_Demo_Client.Models</code></li> <li><code>System</code> </li> <li><code>System.Collections.Generic</code></li> <li><code>System.Linq</code></li> <li><code>System.Net.Http.Json</code></li> <li><code>System.Text</code></li> <li><code>System..Threading.Tasks</code></li> </ul> <p>Here are the steps to follow. </p>"},{"location":"fast_api_tutorial/#get-fatigue-score","title":"Get Fatigue Score","text":"<p>Follow the instructions below to get fatigue score. This code sends <code>HTTP POST</code> request to a web API endpoint.</p>"},{"location":"fast_api_tutorial/#step-1-generate-a-token","title":"Step 1: Generate a token","text":"<p>Generate a Bearer token to use with this endpoint. Follow the instructions given in How to generate a Bearer token? tutorial to generate a bearer token.</p>"},{"location":"fast_api_tutorial/#step-2-set-the-variable-values","title":"Step 2: Set the variable values","text":"<p>Set the values of <code>apiKey</code>, <code>accessToken</code>, <code>rosterCSV</code>, and <code>clientId</code> variables. </p> <pre><code>var apiUrl = \"https://api-eu.frmsc.com\";\nvar accessToken = \"[Your_Accesstoken]\";\nvar rosterCsv = File.ReadAllText(\"SampleRosters\\\\ExampleRosterUpload.csv\");\nvar clientId = \"[Your_ClientId]\";\n</code></pre> <p>You can get the <code>accessToken</code> from the previous step.  </p> <p>The <code>rosterCSV</code> variable is set to read the roster data from a CSV file. Set the parameter value of the <code>File.ReadAllText()</code> function to the location of the CSV file with the roster data.</p>"},{"location":"fast_api_tutorial/#step-3-initiate-request","title":"Step 3: Initiate request","text":"<p>Create an HTTP client and set the base address to the API URL. We recommend that you also set the HTTP client to timeout after 1000 seconds. Then, create an HTTP request message with the HTTP method set to POST and the endpoint set to <code>/api/Processor/ProcessFatigue</code>. The request message should also include the <code>authorization</code> header with the access token.</p> <pre><code>HttpClient client = new HttpClient();\nclient.Timeout = TimeSpan.FromSeconds(1000);\nclient.BaseAddress = new Uri(apiUrl);\n\nvar request = new HttpRequestMessage(HttpMethod.Post, \"/api/Processor/ProcessFatigue\");\n\nrequest.Version = new Version(2, 0);\nrequest.Headers.Add(\"authorization\", $\"Bearer {accessToken}\");\n</code></pre>"},{"location":"fast_api_tutorial/#step-4-prepare-request-body","title":"Step 4: Prepare request body","text":"<p>Create an instance of the <code>FatigueProcessorPayload</code> class and sets its properties. </p> <pre><code>var payload = new \n{    \n    RosterData = rosterCsv,\n    SleepData = new List&lt;SleepData&gt;(),\n    PreferredScale = \"SP\",\n    DateFormat = \"dmy\",\n    GenerateSleeps = true,\n    SleepSettings = new List&lt;SleepSetting&gt;()\n};\n</code></pre> <p>The <code>FatigueProcessorPayload</code> class has six properties.</p> <ul> <li> <p>Set the RosterData property to refer to <code>rosterCsv</code>. </p> </li> <li> <p>The <code>PreferredScale</code> property has been set to <code>SP</code> in the example. This value can be changed to indicate a different scale, which you want the result to be in. See Step 5: Retry with different PrefferedScale for different values you can assign to  <code>PreferredScale</code> property.</p> </li> <li> <p>The <code>SleepData</code> property takes an array of the following properties:</p> <ul> <li><code>ScheduleName</code>, which indicates the schedule name</li> <li><code>SleepStart</code>, which indicates the date and time (Zulu format) when the sleep started</li> <li><code>SleepEnd</code>, which indicates the date and time (Zulu format) when the sleep ended</li> </ul> </li> <li> <p>Leave the <code>SleepData</code> and <code>SleepSettings</code> properties empty by assiging empty lists to them. </p> </li> <li> <p>The <code>DateFormat</code> property is set to <code>dmy</code>, which indicates DD/MM/YYYY date format has been used in roster data. You could change this value to <code>mdy</code>to indicate MM/DD/YYYY date format.</p> </li> <li> <p>The <code>GenerateSleeps</code> property has been set to <code>true</code> to indicate that SAFE must predict sleeps automatically. You can provide <code>SleepData</code> and still set the <code>GenerateSleeps</code> property to true to indicate SAFE must disregard the provided <code>SleepData</code> and predict sleeps automatically.</p> </li> </ul>"},{"location":"fast_api_tutorial/#step-5-make-the-request","title":"Step 5: Make the request","text":"<p>Create a JSON object using the request body and send the request message to the API and wait for it to return the result.</p> <pre><code>request.Content = JsonContent.Create(payload);\nvar response = await client.SendAsync(request);\nvar result = await response.Content.ReadAsStringAsync();\nConsole.WriteLine(\"Result: \" + result);\nreturn result;\n</code></pre>"},{"location":"fast_api_tutorial/#step-6-retry-with-different-prefferedscale","title":"Step 6: Retry with different <code>PrefferedScale</code>","text":"<p>There are two workflows for this step depending on the response you receive from the previous step.</p> Response is an errorResponse is the result <p>If the response from the previous step is an error, read the response to locate the cause of the error.</p> <p>How to read the error?</p> <p>Each error contains 3 pieces of information separated by a | symbol. </p> <ul> <li>The first part shows you the row within the csv where the error occured. </li> <li>The second part shows the schedule, which the error is for, and </li> <li>The third part shows the error message.</li> </ul> <p>Example response error</p> <pre><code>{\n  \"errors\":[\"6|Pilot1|The 'Off duty date' (1/2/2015 2:00 PM) cannot be more than 30 hours after the 'On duty date' (1/1/2015 1:53 AM).\"]\n}\n</code></pre> <p>Resolve any error in the roster data file and retry sending the request. </p> <p>If you receive the result for the scale you had set in <code>PreferredScale</code> property, you can send the request again within a different value assigned to the <code>PreferredScale</code> property. The following values are supported for the <code>PreferredScale</code> property. Send only one value at a time.</p> <ul> <li><code>SP</code> for Samn-Perelli scale</li> <li><code>KSS</code> for Karolinska Sleepiness Scale</li> <li><code>KP</code> for Karolinska Probability scale</li> <li><code>VS</code> for Vigilance Degradation scale</li> <li><code>CRD</code> for Complex Reaction Degradation scale</li> <li><code>PMR</code> for Percentage Missed Responses scale</li> </ul>"},{"location":"fast_api_tutorial/#get-fatigue-risk-score","title":"Get Fatigue Risk Score","text":"<p>Follow the instructions below to get fatigue score together with risk score. This code sends <code>HTTP POST</code> request to a web API endpoint.</p>"},{"location":"fast_api_tutorial/#step-1-generate-a-token_1","title":"Step 1: Generate a token","text":"<p>Generate a Bearer token to use with this endpoint. Follow the instructions given in How to generate a Bearer token? tutorial to generate a bearer token.</p>"},{"location":"fast_api_tutorial/#step-2-set-the-variable-values_1","title":"Step 2: Set the variable values","text":"<p>Set the values of <code>apiKey</code>, <code>accessToken</code>, <code>rosterCSV</code>, and <code>clientId</code> variables. </p> <pre><code>var apiUrl = \"https://api-eu.frmsc.com\";\nvar accessToken = \"[Your_Accesstoken]\";\nvar rosterCsv = File.ReadAllText(\"SampleRosters\\\\ExampleRosterUpload.csv\");\nvar clientId = \"[Your_ClientId]\";\n</code></pre> <p>You can get the <code>accessToken</code> from the previous step.  </p> <p>The <code>rosterCSV</code> variable is set to read the roster data from a CSV file. Set the parameter value of the <code>File.ReadAllText()</code> function to the location of the CSV file with the roster data.</p>"},{"location":"fast_api_tutorial/#step-3-initiate-request_1","title":"Step 3: Initiate request","text":"<p>Create an HTTP client and set the base address to the API URL. We recommend that you also set the HTTP client to timeout after 1000 seconds. Then, create an HTTP request message with the HTTP method set to POST and the endpoint set to <code>/api/Processor/ProcessFatigueRisk</code>. The request message should also include the <code>authorization</code> header with the access token.</p> <pre><code>HttpClient client = new HttpClient();\nclient.Timeout = TimeSpan.FromSeconds(1000);\nclient.BaseAddress = new Uri(apiUrl);\n\nvar request = new HttpRequestMessage(HttpMethod.Post, \"/api/Processor/ProcessFatigueRisk\");\n\nrequest.Version = new Version(2, 0);\nrequest.Headers.Add(\"authorization\", $\"Bearer {accessToken}\");\n</code></pre>"},{"location":"fast_api_tutorial/#step-4-prepare-request-body_1","title":"Step 4: Prepare request body","text":"<p>Create an instance of the <code>FatigueProcessorPayload</code> class and sets its properties. </p> <pre><code>var payload = new \n{    \n    RosterData = rosterCsv,\n    SleepData = new List&lt;SleepData&gt;(),\n    PreferredScale = \"SP\",\n    DateFormat = \"dmy\",\n    GenerateSleeps = true,\n    SleepSettings = new List&lt;SleepSetting&gt;()\n};\n</code></pre> <p>The <code>FatigueProcessorPayload</code> class has six properties.</p> <ul> <li> <p>Set the RosterData property to refer to <code>rosterCsv</code>. </p> </li> <li> <p>The <code>PreferredScale</code> property has been set to <code>SP</code> in the example. This value can be changed to indicate a different scale, which you want the result to be in. See Step 5: Retry with different PrefferedScale for different values you can assign to  <code>PreferredScale</code> property.</p> </li> <li> <p>The <code>SleepData</code> property takes an array of the following properties:</p> <ul> <li><code>ScheduleName</code>, which indicates the schedule name</li> <li><code>SleepStart</code>, which indicates the date and time (Zulu format) when the sleep started</li> <li><code>SleepEnd</code>, which indicates the date and time (Zulu format) when the sleep ended</li> </ul> </li> <li> <p>Leave the <code>SleepData</code> and <code>SleepSettings</code> properties empty by assiging empty lists to them. </p> </li> <li> <p>The <code>DateFormat</code> property is set to <code>dmy</code>, which indicates DD/MM/YYYY date format has been used in roster data. You could change this value to <code>mdy</code>to indicate MM/DD/YYYY date format.</p> </li> <li> <p>The <code>GenerateSleeps</code> property has been set to <code>true</code> to indicate that SAFE must predict sleeps automatically. You can provide <code>SleepData</code> and still set the <code>GenerateSleeps</code> property to true to indicate SAFE must disregard the provided <code>SleepData</code> and predict sleeps automatically.</p> </li> </ul>"},{"location":"fast_api_tutorial/#step-5-make-the-request_1","title":"Step 5: Make the request","text":"<p>Create a JSON object using the request body and send the request message to the API and wait for it to return the result.</p> <pre><code>request.Content = JsonContent.Create(payload);\nvar response = await client.SendAsync(request);\nvar result = await response.Content.ReadAsStringAsync();\nConsole.WriteLine(\"Result: \" + result);\nreturn result;\n</code></pre>"},{"location":"fast_api_tutorial/#step-6-retry-with-different-prefferedscale_1","title":"Step 6: Retry with different <code>PrefferedScale</code>","text":"<p>There are two workflows for this step depending on the response you receive from the previous step.</p> Response is blankResponse is the result <p>If the response from the previous step is blank, use the Fatigue endpoint to find the error.   Resolve any error in the roster data file. Then, return to Get Fatigue Risk Score. </p> <p>If you receive the result for the scale you had set in <code>PreferredScale</code> property, you can send the request again within a different value assigned to the <code>PreferredScale</code> property. The following values are supported for the <code>PreferredScale</code> property. Send only one value at a time.</p> <ul> <li><code>SP</code> for Samn-Perelli scale</li> <li><code>KSS</code> for Karolinska Sleepiness Scale</li> <li><code>KP</code> for Karolinska Probability scale</li> <li><code>VS</code> for Vigilance Degradation scale</li> <li><code>CRD</code> for Complex Reaction Degradation scale</li> <li><code>PMR</code> for Percentage Missed Responses scale</li> </ul>"},{"location":"fast_api_tutorial/#complete-code","title":"Complete Code","text":"<pre><code>using IdentityModel.Client;\nusing Safe_API_Demo_Client.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http.Json;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Safe_API_Demo_Client\n{\n    public static class FastApi\n    {\n        public static async void Run()\n        {\n            var identityUrl = \"https://identity-eu.frmsc.com\";            \n            var apiUrl = @\"https://api-eu.frmsc.com\";\n\n            var clientId = \"[Your_ClientId]\";\n            var clientSecret = \"[your_ClientSecret]\";\n\n            var rosterCsv = File.ReadAllText(\"SampleRosters\\\\ExampleRosterUpload.csv\");\n\n            var accessToken = await Authenticate(identityUrl, clientId, clientSecret, \"frmsc_fast_safe_api\");\n            await ProcessFatigue(apiUrl, accessToken, rosterCsv);\n\n            var accessToken = await Authenticate(identityUrl, clientId, clientSecret, \"frmsc_fast_safe_risk_api\");\n            await ProcessFatigueRisk(apiUrl, accessToken, rosterCsv);\n        }\n\n        static async Task&lt;string&gt; ProcessFatigue(string apiUrl, string accessToken, string rosterData)\n        {\n            try\n            {\n                HttpClient client = new HttpClient();\n                client.Timeout = TimeSpan.FromSeconds(1000);\n                client.BaseAddress = new Uri(apiUrl);\n\n                var request = new HttpRequestMessage(HttpMethod.Post, \"/api/Processor/ProcessFatigue\");\n\n                request.Version = new Version(2, 0);\n                request.Headers.Add(\"authorization\", $\"Bearer {accessToken}\");\n\n                var payload = new FatigueProcessorPayload\n                {\n                    RosterData = rosterData,\n                    SleepData = new List&lt;SleepData&gt;(),\n                    PreferredScale = \"SP\",\n                    DateFormat = \"dmy\",\n                    GenerateSleeps = true,\n                    SleepSettings = new List&lt;SleepSetting&gt;()\n                };\n\n                request.Content = JsonContent.Create(payload);\n\n                var response = await client.SendAsync(request);\n                var result = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(\"Result: \" + result);\n                return result;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"Error: \" + ex.Message);\n                throw;\n            }\n        }\n\n        static async Task&lt;string&gt; ProcessFatigueRisk(string apiUrl, string accessToken, string rosterData)\n        {\n            try\n            {\n                HttpClient client = new HttpClient();\n                client.Timeout = TimeSpan.FromSeconds(1000);\n                client.BaseAddress = new Uri(apiUrl);\n\n                var request = new HttpRequestMessage(HttpMethod.Post, \"/api/Processor/ProcessFatigueRisk\");\n\n                request.Version = new Version(2, 0);\n                request.Headers.Add(\"authorization\", $\"Bearer {accessToken}\");\n\n                var payload = new FatigueProcessorPayload\n                {\n                    RosterData = rosterData,\n                    SleepData = new List&lt;SleepData&gt;(),\n                    PreferredScale = \"SP\",\n                    DateFormat = \"dmy\",\n                    GenerateSleeps = true,\n                    SleepSettings = new List&lt;SleepSetting&gt;()\n                };\n\n                request.Content = JsonContent.Create(payload);\n\n                var response = await client.SendAsync(request);\n                var result = await response.Content.ReadAsStringAsync();\n                Console.WriteLine(\"Result: \" + result);\n                return result;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"Error: \" + ex.Message);\n                throw;\n            }\n        }\n\n        static async Task&lt;string&gt; Authenticate(string identityUrl, string clientId, string clientSecret, string scope)\n        {\n            HttpClient client = new HttpClient();\n            client.BaseAddress = new Uri(identityUrl);\n\n            var openIdDiscoveryDocument = client.GetDiscoveryDocumentAsync(identityUrl).GetAwaiter().GetResult();\n\n            var request = new ClientCredentialsTokenRequest\n            {\n                Address = openIdDiscoveryDocument.TokenEndpoint,\n\n                ClientId = clientId,\n                ClientSecret = clientSecret,\n                Scope = scope\n            };\n\n            var tokenResponse = await client.RequestClientCredentialsTokenAsync(request);\n            if (tokenResponse != null)\n            {\n                return tokenResponse.AccessToken;\n            }\n            else\n            {\n                Console.WriteLine(\"Authentication failed\");\n                throw new Exception(\"Authentication failed\");\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"migrate/","title":"Migration from v1 to v2","text":"<p>Example application</p> <p>We have modified our original example application to work with our new API. Download modified original example application.</p>"},{"location":"migrate/#why-did-we-migrate","title":"Why did we migrate?","text":"<p>The migration to API v2 was necessary to improve the security of our transmission. We have made changes to our authentication method. The new authentication method follows the client credential flow of the OAuth 2.0 specification, which is more secure than the previous version. By migrating to API v2, we have ensured that our transmission is more secure and less vulnerable to attacks.</p>"},{"location":"migrate/#what-have-we-changed","title":"What have we changed?","text":""},{"location":"migrate/#new-token-api","title":"New Token API","text":"<p>Changes have been made to the <code>/authentication</code> endpoint. Here are the key changes.</p> <ul> <li> <p>The token endpoint is now separated from Roster APIs and hosted on a different Identity server. The base address of the server is <code>https://identity-eu.frmsc.com</code>. See the Token section of our API Reference for more information. </p> </li> <li> <p>You must pass <code>Authorization</code> header starting with the word <code>Basic</code> followed by a space and a base64 encoded string of <code>&lt;Your_ClientID&gt;:&lt;Your_ClientSecret&gt;</code>. See below for the format and the example.</p> <p>Manually encoding?</p> <p>Use base64encode.org to encode or decode the string of <code>&lt;Your_ClientID&gt;:&lt;Your_ClientSecret&gt;</code>.</p> Before encodingAfter encodingExample of Authorization header value <pre><code>  5471E010-DDEE-4C98-FF8F-08DB2245E373:7rg6Gt+hUiobtXI9Jb37z2vtrhw1CEgDkwFZcMbN5Yc=\n</code></pre> <pre><code>  NTQ3MUUwMTAtRERFRS00Qzk4LUZGOEYtMDhEQjIyNDVFMzczOjdyZzZHdCtoVWlvYnRYSTlKYjM3ejJ2dHJodzFDRWdEa3dGWmNNYk41WWM9\n</code></pre> <pre><code>  Basic NTQ3MUUwMTAtRERFRS00Qzk4LUZGOEYtMDhEQjIyNDVFMzczOjdyZzZHdCtoVWlvYnRYSTlKYjM3ejJ2dHJodzFDRWdEa3dGWmNNYk41WWM9\n</code></pre> </li> <li> <p>The body must have two fields:</p> <ul> <li><code>grant_type</code> whose value must be <code>client_credentials</code></li> <li><code>scope</code> whose value must be <code>frmsc_safe_upload_api</code></li> </ul> </li> <li> <p>The content-type for the body must be <code>x-www-form-urlencoded</code></p> </li> </ul> <p>Example request for token</p> Example cURL requestExample response <pre><code>curl --location 'https://identity-eu.frmsc.com/connect/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--header 'Authorization: Basic NTQ3MUUwMTAtRERFRS00Qzk4LUZGOEYtMDhEQjIyNDVFMzczOjdyZzZHdCtoVWlvYnRYSTlKYjM3ejJ2dHJodzFDRWdEa3dGWmNNYk41WWM9' \\\n\n-d grant_type=client_credentials&amp;scope=frmsc_safe_upload_api \n</code></pre> <pre><code>eyJhbGciOiJSUzI1NiIsImtpZCI6IjBFNUMxNEU4OEIzRjFFMEFCNDlGNUIzMkU5NzNDMDQ0NkY0MjJDRURSUzI1NiIsInR5cCI6ImE0K2p3dCIsIng1dCI6IkRsd1U2SXNfSGdxMG4xc3k2WFBBUkc5Q0xPMCJ9.eyJuYmYiOjE3MDQ4NTQwNjksImV4cCI6MTcwNDg1NzY2OSwiaXNzIjoiaHR0cHM6Ly9pZGVudGl0eS1ldS5mcm1zYy5jb20iLCJhdWQiOiJmcm1zY19zYWZlX3VwbG9hZF9hcGkiLCJjbGllbnRfaWQiOiI1NDcxRTAxMC1EREVFLTRDOTgtRkY4Ri0wOERCMjI0NUUzNzIiLCJqdGkiOiIxN0ZBMjlDMEFFMkJDMTQ5QjJGQjAwNkFCQjYwNDU5RSIsImlhdCI6MTcwNDg1NDA2OSwic2NvcGUiOlsiZnJtc2Nfc2FmZV91cGxvYWRfYXBpIl19.X-OWtCzTNML0O5RwcoPOOBPx33lQEXvPy4LvauhVpzYto4XfKFTT19HtHGZByCeyexckq0VtIwNukRrBOdyQuqjSKzVDpVHLoUBj6C5VIheQC8qCHZYEyZhzum5d0qmlUejYbaXeja4_lBRLLp1pzQO6ERAYYyLkSa-L-bhtNl3EyabNf3PyiKJAfySc5R7z4yN32IGxLCeTcf8_fimASrRZNUz52ozRQiKbibYtC38yWNLpbjnNvg7u4aWQ7x41FyHKfPC7D9P7_4SBc3uqciLrYyYUoBHpdOF7OwvGXdC2sR9vhe2dAYGGKNTNH0OJQ1xFrXhripkItVEabhN_ag\n</code></pre>"},{"location":"migrate/#safe-application-api","title":"SAFE Application API","text":"<p>We have not made any major changes to the <code>/UploadRoster</code> endpoint payload. However, we have changed the base address of the Upload server to <code>https://web-eu.frmsc.com</code>. </p> <p>Moreover, to use the SAFE Application API endpoints, you must pass the response you received from calling the identity server in the <code>Authorization</code> header. </p> <p>You must pass <code>Authorization</code> header starting with the word <code>Bearer</code> followed by a space and token string. See below for format and example. If you are following the OAuth2.0 flow, the platform you are using should automatically do all these steps for you.</p> Syntax of Authorization header valueExample of Authorization header value <pre><code>  Bearer &lt;token_string&gt;\n</code></pre> <pre><code>  Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjBFNUMxNEU4OEIzRjFFMEFCNDlGNUIzMkU5NzNDMDQ0NkY0MjJDRURSUzI1NiIsInR5cCI6ImE0K2p3dCIsIng1dCI6IkRsd1U2SXNfSGdxMG4xc3k2WFBBUkc5Q0xPMCJ9.eyJuYmYiOjE3MDQ4NTQwNjksImV4cCI6MTcwNDg1NzY2OSwiaXNzIjoiaHR0cHM6Ly9pZGVudGl0eS1ldS5mcm1zYy5jb20iLCJhdWQiOiJmcm1zY19zYWZlX3VwbG9hZF9hcGkiLCJjbGllbnRfaWQiOiI1NDcxRTAxMC1EREVFLTRDOTgtRkY4Ri0wOERCMjI0NUUzNzIiLCJqdGkiOiIxN0ZBMjlDMEFFMkJDMTQ5QjJGQjAwNkFCQjYwNDU5RSIsImlhdCI6MTcwNDg1NDA2OSwic2NvcGUiOlsiZnJtc2Nfc2FmZV91cGxvYWRfYXBpIl19.X-OWtCzTNML0O5RwcoPOOBPx33lQEXvPy4LvauhVpzYto4XfKFTT19HtHGZByCeyexckq0VtIwNukRrBOdyQuqjSKzVDpVHLoUBj6C5VIheQC8qCHZYEyZhzum5d0qmlUejYbaXeja4_lBRLLp1pzQO6ERAYYyLkSa-L-bhtNl3EyabNf3PyiKJAfySc5R7z4yN32IGxLCeTcf8_fimASrRZNUz52ozRQiKbibYtC38yWNLpbjnNvg7u4aWQ7x41FyHKfPC7D9P7_4SBc3uqciLrYyYUoBHpdOF7OwvGXdC2sR9vhe2dAYGGKNTNH0OJQ1xFrXhripkItVEabhN_ag\n</code></pre>"},{"location":"results_breakdown/","title":"Fatigue and Risk Scales","text":""},{"location":"results_breakdown/#fatigue-scales","title":"Fatigue Scales","text":"<p>There are 7 fatigue scales available in the SAFE predictive model suite.</p>"},{"location":"results_breakdown/#the-samn-perelli-scale-fatigue","title":"The Samn Perelli scale (Fatigue)","text":"<p>In their original paper on linking scores to fatigue, (Samn, SW and Perelli, LP. Estimating Aircrew Fatigue: A Technique with Application to Airlift operations. Report SAM-TR \u2013 82-21. December 1981. USAF School of Aerospace Medicine.) authors Samn and Perelli classified their Samn-Perelli (SP) scores between 5 and 6 as being associated with moderate to severe fatigue with some performance impairment possibly occurring. They considered flying duties permissible but not recommended. </p> <p>Initially designed for military pilots, the scale was based on data gathered during computer-simulated airline operations. The scale is shown below.</p> <p>Samn Perelli Subjective Fatigue Scale</p> <pre><code>1. Fully Alert, wide awake\n2. Very lively, responsive, but not at peak\n3. Okay, somewhat fresh\n4. A little tired, less than fresh\n5. Moderately tired, let down\n6. Extremely tired, very difficult to concentrate\n7. Completely exhausted, unable to function\n</code></pre> <p>The advantage of using this scale is that the scale is validated with studies of tired aircrew in simulators. Moreover, the descriptions are simple to understand.</p>"},{"location":"results_breakdown/#the-karolinska-sleepiness-scale-sleepiness","title":"The Karolinska Sleepiness Scale (Sleepiness)","text":"<p>Designed by the Karolinska Institute in Stockholm, the Karolinska Sleepiness scale (KSS) started its life as a 9 point scale but with definition covering only alternative levels as follows:</p> <pre><code>1. Extremely alert\n2.\n3. Alert\n4.\n5. Neither sleepy nor alert\n6.\n7. Sleepy  - but no difficulty remaining awake\n8.\n9. Extremely sleepy - fighting sleep\n</code></pre> <p>In time, the definitions of each level were revised and published with the missing levels completed.</p> <p>Karolinska Sleepiness Scale Definitions</p> <pre><code>1.  Very alert\n2.  Very lively, responsive, but not at peak\n3.  Alert, normal level\n4.  Okay, somewhat fresh\n5.  Neither alert nor sleepy\n6.  Moderately tired, let down\n7.  Sleepy, but no effort to keep awake\n8.  Extremely tired, very difficult to concentrate\n9.  Very sleepy, great effort to keep awake\n</code></pre> <p>More recently, a 10th level was included to match level 7 on the Samn Perelli scale.</p> <pre><code>10. Extremely sleepy, can not keep awake\n</code></pre> <p>The advantage of using the KSS scale is its validation in studies using an electroencephalogram (EEG) to measure brain activity.</p> <p>As the SP scale is a 7-point scale and the KSS is a 9/10-point scale, some users believe the two to be interchangeable when measuring either fatigue or sleepiness in a fatigue management programme.  However, SP scale is a fatigue scale and the Karolinska Scale is a sleepiness scale.</p>"},{"location":"results_breakdown/#the-100-point-alertness-scale-developed-by-frmsc","title":"The 100-point alertness scale \u2013 developed by FRMSc","text":"<p>FRMSc team developed this scale in the 1970s to identify and measure the fatigue experienced by aircrew of (initially) military aircraft. This is a linear 0-100 scale where 0 indicates low alertness, and 100 indicates high alertness.</p> <p>As no fatigue scales were available when our original research programme started, a scale was required before anything could be measures. Two points were created \u2013 one at 0 and the other at 100, that defined the range of likely alertness change experienced by commercial aircraft pilots at that time as they went about their occupation. </p> <p>Since then, the range of alertness challenges has changed. Even with the emergence of other scales such as the SP scale, the 100-point Alertness Scale (AS) is still relevant. However, the Samn Perelli scale is easier to use. We suggest clients to use SP fatigue scale.</p> <p>Warning</p> <p>0 on the AS is not the same as 1 on the SP scale. Similarly, 100 on the AS is not the same as 7 on the SP scale.</p>"},{"location":"results_breakdown/#karolinska-probability-scale","title":"Karolinska Probability Scale","text":"<p>Some biomathematical models have only one score for each duty. In these circumstances it is useful to know how the fatigue increases across the duty, specifically whether the fatigue or sleepiness at the end of the duty is at the higher levels. The Karolinska probability scale has been created to indicate whether the stated duty sleepiness metric is likely greater or equal to 8 at the end of the duty.</p> <p>There is no equivalent in the SP scale. A typical output from the SAFE model would be to declare \u201cAt this mean level of alertness, the probability of a value of at least 8 on the Karolinska Sleepiness Scale is 0.15\u201d</p>"},{"location":"results_breakdown/#vigilance-degradation-scale","title":"Vigilance Degradation scale","text":"<p>Vigilance Degradation scale measures visual vigilance degradation. It compares visual vigilance during a standard laboratory test to that of the personnel to identify if fatigue caused a reduction in vigilance. The SAFE model provides an indication of how much visual vigilance is degraded by fatigue.</p>"},{"location":"results_breakdown/#complex-reaction-degradation-scale","title":"Complex Reaction Degradation scale","text":"<p>The Complex Reaction Degradation scale compares the speed of reaction during a standard laboratory test to that of the personnel when fatigued. The SAFE model indicates degradation by declaring, \u201cAt this level of alertness, the response time on a warning light on a complex task is degraded by 36.1% compared with a typical rested value\u201d.</p>"},{"location":"results_breakdown/#percentage-missed-response-scale","title":"Percentage Missed Response scale","text":"<p>The Percentage Missed Response scale does not suggest that the aircrew may miss an ATC call, as aircrew are sensitive to these and, unless extremely fatigued, will recognise these calls. Like the Vigilance Degradation and Reaction Degradation scales, the Percentage Missed Response scale is based on a standard laboratory test and indicates the likely general degradation of human performance.</p> <p>The SAFE model provides an indicates by declaring, \u201cAt this level of alertness, the percentage of missed responses in a sustained attention task is 17.64%. This compares with a typical rested value of 6%\u201d</p> <p>There is also an 8th scale for comparing human performance when fatigued with when having ingested alcohol. This scale was removed from the SAFE models after misuse. </p> <p>There are some similarities with the degradation of vigilance when fatigued and after drinking alcohol, but in other ways, performance is not the same. When fatigued, humans speak little, but after drinking alcohol, humans become garrulous. When fatigued, aircrew know they should not fly but are less inhibited after drinking alcohol.</p> <p>Overall, we suggest there are not enough similarities for the blood-alcohol scale to be helpful, and there are many reasons why it may be abused. Consequently, we have removed it from our models.</p>"},{"location":"results_breakdown/#risk-scales","title":"Risk Scales","text":""},{"location":"results_breakdown/#duty-risk-metric","title":"Duty Risk Metric","text":"<p>FRMSc has developed a Duty Risk metric to resolve the difficulties in identifying the likelihood of an incident or accident due to fatigue levels in aircrew. This metric identifies duties that present as higher risk but are not easily identifiable by fatigue alone, e.g. consecutive early morning starts.</p> <p>The metric reports the relative risk of an incident caused by fatigue and focuses on detecting the likelihood of a reportable incident. Its exact composition is proprietary but has been developed using an extensive aviation fatigue incidents database held by FRMSc. </p> <p>It has been designed to serve as a single composite metric that considers the physiological response of the aircrew to fatigue levels they experience when performing their duties. It also considers the likely risk to operations at any given point and the nature of the undertaken task simultaneously. </p> <p>Like the fatigue scales, each operation will determine its specific categorisation of the Duty Risk Metric. Our recommendation is to consider 1 to 13 being low risk, 13-18 being medium risk, and 18+ being high risk.</p> <p>The Reference Score</p> <p>The reference fatigue risk score of 1.0 relates to a 2-sector duty with 2 acclimatised pilots operating from 10 am until 8 pm local time. </p> <p>The metric will read zero if the aircrew is stationary or involved with duties that contain no flights, but it will read high, for example, if the pilots are landing when the fatigue levels are high. </p> <p>Similarly, during the cruise phase, the risks of a reportable incident for pilots will be reduced, reducing the risk score. It means that even if the fatigue levels are relatively high, the overall risk is relatively low during the cruise phase compared with the landing phase. But, if a pilot has flown multiple sectors and landed numerous times, they will also have a higher risk score than an equivalent pilot flying a single-sector duty. </p> <p>The reportable incidents are different for pilots and cabin crew. For cabin crew, the cruise phase is difficult as unruly passengers and maleficent actors may choose that phase of the flight to create a nuisance, increasing cabin crew's risk score. However, the risk score is usually lower for them during take-off and landing unless circumstances cause a difficult take-off or landing. </p> <p>Pilots have fewer reportable incidents, but those may have a high impact. Cabin crew have more reportable incidents, but from a safety perspective, the impacts of these incidents on the risk score are likely to be lower than those experienced by pilots. The cabin crew incidents might lower the passenger satisfaction, which is crucial for the marketing department that aims to maintain their loyalty.</p>"},{"location":"safe_app_api/","title":"SAFE App API","text":"<p>This article is designed to show you the workflow for SAFE Application API. Below the diagram you will find the high-level steps to work with API.</p> <p>Refer to our SAFE API reference documentation for more details.</p>"},{"location":"safe_app_api/#workflow-using-swimlane","title":"Workflow using swimlane","text":""},{"location":"safe_app_api/#workflow-in-steps","title":"Workflow in steps","text":"<p>Our APIs use the OAuth2.0 Client Credentials workflow. See the steps below:</p> <ol> <li> <p>Generate Bearer Token. Ensure:</p> <ul> <li>the <code>&lt;your_client_id&gt;:&lt;your_client_secret&gt;</code> string is base64 encoded</li> <li>the <code>content-type</code> is <code>x-www-form-urlencoded</code></li> <li>the <code>grant-type</code> is <code>client_credentials</code></li> <li> <p>the <code>scope</code> is <code>frmsc_safe_upload_api</code></p> <p>Manually encoding?</p> <p>Use base64encode.org to encode or decode the string of <code>&lt;Your_ClientID&gt;:&lt;Your_ClientSecret&gt;</code>.</p> Before encodingAfter encodingExample of Authorization header value <pre><code>5471E010-DDEE-4C98-FF8F-08DB2245E373:7rg6Gt+hUiobtXI9Jb37z2vtrhw1CEgDkwFZcMbN5Yc=\n</code></pre> <pre><code>NTQ3MUUwMTAtRERFRS00Qzk4LUZGOEYtMDhEQjIyNDVFMzczOjdyZzZHdCtoVWlvYnRYSTlKYjM3ejJ2dHJodzFDRWdEa3dGWmNNYk41WWM9\n</code></pre> <pre><code>Basic NTQ3MUUwMTAtRERFRS00Qzk4LUZGOEYtMDhEQjIyNDVFMzczOjdyZzZHdCtoVWlvYnRYSTlKYjM3ejJ2dHJodzFDRWdEa3dGWmNNYk41WWM9\n</code></pre> </li> </ul> </li> <li> <p>Use the generated token for Bearer authorization in <code>/UploadRoster</code> endpoint. Generate roster token to get results. Ensure:</p> <ul> <li>the mandatory fields are filled.</li> <li>the <code>RosterData</code> field is populated in the correct order.</li> </ul> </li> <li>Use the roster token with <code>/GetResults</code> endpoint to fetch the status of upload. Ensure:<ul> <li>correct bearer token is being used for authorization.</li> <li>roster token is correct</li> </ul> </li> <li>If the status is not <code>completedsuccessfully</code>, set the value of <code>dataKey</code> parameter to <code>feedback</code> and submit.<ul> <li>Resolve any error.</li> <li>Return to Step 2. Keep the <code>RosterName</code> same and set the value of <code>Overwrite</code> field to <code>true</code> and resubmit the roster.</li> </ul> </li> <li>If the status is <code>completedsuccessfully</code>, set the value of <code>dataKey</code> parameter to the type of result you want to receive and submit.</li> </ol>"},{"location":"safe_app_api/#payload","title":"Payload","text":""},{"location":"safe_app_api/#request-payload","title":"Request payload","text":"<p>The request payloads differ for UploadRoster and GetResults endpoint. </p>"},{"location":"safe_app_api/#for-upload-roster","title":"For Upload Roster","text":"<p>Download example files for RosterData csv and ActivitiyData csv here. See our API reference documentation for more information.</p>"},{"location":"safe_app_api/#schema","title":"Schema","text":"RosterName<sup>string Required</sup> <p>A name for the schedule. Use employee identifier.</p> RosterData<sup>string Required</sup> <p>See the table below for the format of the data. Note:</p> <ul> <li>This property takes comma separated values (csv).</li> <li>The roster data must be in the same order as shown below.</li> <li>You can omit the column titles. In such a case, the order in which the column titles are listed below will be assumed.</li> <li>You can send multiple rows at a time.</li> <li>You can fill in the required columns and delete the others.</li> <li>If you are sending the data to a column that is not required, you must send all columns. The columns without data can be left blank.</li> </ul> <p> ColumnName(<sup>+</sup> required) Format Description Reference<sup>+</sup> Text A free-text field usually used to indicate a pilot. Use pilot's name or ID. OnDutyDate<sup>+</sup> Date (DD/MM/YYYY) The duty start date. OnDutyTime<sup>+</sup> Time (hh:mm) The duty start time. StartAirport<sup>+</sup> Text The airport at which the duty started. Send ICAO, IATA, or FAA airport codes or a combination of these codes. OffDutyDate<sup>+</sup> Date (DD/MM/YYYY) The duty end date. OffDutyTime<sup>+</sup> Time (hh:mm) The duty end time. EndAirport<sup>+</sup> Text The airport at which the duty ended. Send ICAO, IATA, or FAA airport codes or a combination of these codes. Sectors Number The number of flights in duty. Default value is 1. CrewComposition Number Send <ul><li>2 for 2 Pilots</li><li>3 for 3 Pilots</li><li>4 for 4 Pilots</li><li>9 for Cabin Crew</li></ul>Default value is 2. SleepCount Number (0-2) The number of sleeps the pilot or the crew member slept on duty. SleepOrder Number (1-3) The rank, which the pilot or the crew member slept in. Send <ul><li>1 for First</li><li>2 for Second</li><li>3 for Third</li></ul> SleepClass Number (1-5) Send <ul><li>1 for Class 1 - Bunk</li><li>2 for Class 2 - Cabin seat: 40 degrees or more recline</li><li>3 for Class 3 - Flight deck seat</li><li>4 for Class 4 - Economy seat: Less than 40 degrees recline</li><li>5 for Class 5 - Jump seat</li></ul> HomeBase<sup>+</sup> Text Send ICAO, IATA, or FAA airport codes or a combination of these codes. Default value is Start airport code. TimeReference<sup>+</sup> Number (0-2) The reference time zone. Send <ul><li>0 for UTC</li><li>1 for Base airport timezone</li><li>2 for Local timezone</li></ul> OnPartialAugmentDate Date (DD/MM/YYYY) The time on which the pilot or the crew member started their partial agumentation. OnPartialAugmentTime Time (hh:mm) The time at which the pilot or the crew member started their partial agumentation. OffPartialAugmentDate Date (DD/MM/YYYY) The date on which the pilot or the crew member ended their partial agumentation. OffPartialAugmentTime Time (hh:mm) The time at which the pilot or the crew member ended their partial agumentation. FirstRestStartDate Date (DD/MM/YYYY) The date on which the pilot or the crew member started their first rest. FirstRestStartTime Time (hh:mm) The time at which the pilot or the crew member started their first rest. FirstRestEndDate Date (DD/MM/YYYY) The date on which the pilot or the crew member ended their first rest. FirstRestEndTime Time (hh:mm) The time at which the pilot or the crew member ended their first rest. SecondRestStartDate Date (DD/MM/YYYY) The date on which the pilot or the crew member started their second rest. SecondRestStartTime Time (hh:mm) The time at which the pilot or the crew member started their second rest. SecondRestEndDate Date (DD/MM/YYYY) The date on which the pilot or the crew member ended their second rest. SecondRestEndTime Time (hh:mm) The time at which the pilot or the crew member ended their second rest. SplitShift Number (0-1) Indicates whether the pilot or crew member had rested in between flight. Send <ul><li>0 for True</li><li>1 for False</li></ul> DutyType Number (1-3) The type of duty. Send <ul><li>1 for active</li><li>2 for active - split shift</li><li>3 for standby duty</li></ul> Fleet Text A free-text field used to indicate fleet message. Rank Text A free-text field used to indicate a pilot's rank. Workload Number When the sector count is 0, send <ul><li>0 for no activity, i.e. doing nothing but not sleeping</li><li>10 for average workload on a typical single-sector duty. Equivalent to workload prior to being able to change workload</li><li>20 for average workload on a typical four-sector duty</li><li>30 for very high workloads</li><li>40 for exceptionally high workloads only seen occassionally</li><li>50 for extremely high workloads only rarely seen</li></ul>When the sector count is more than 0, send <ul><li>-50 for half the workload of standard flying this number of sectors</li><li>0 for standard duty workloads flying this number of sectors. Equivalent to workload prior to being able to change workload</li><li>100 for double the workload of standard flying this number of sectors</li></ul> CrewPrepTime Number The time taken for crew to prepare. Value indicates minutes. Default value is 60 minutes. DutyCommuteTime Number The time taken to commute to the duty. Value indicates minutes. Default value is 60 minutes. </p> ActivityData<sup>string</sup> <p>See the table below for the format of the data. Note:</p> <ul> <li>This property takes comma separated values (csv).</li> <li>The activity data must be in the same order as shown below.</li> <li>You can omit the column titles. In such a case, the order in which the column titles are listed below will be assumed.</li> <li>You can send multiple rows at a time.</li> </ul> <p> ColumnName(<sup>+</sup> required) Format Description Reference<sup>+</sup> Text A free-text field usually used to indicate a Activity. Use pilot's name or ID. ActivityStartDate<sup>+</sup> Date (DD/MM/YYYY) The activity start date. ActivityStartTime<sup>+</sup> Time (hh:mm) The activity start time. ActivityEndDate<sup>+</sup> Date (DD/MM/YYYY) The activity end date. ActivityEndTime<sup>+</sup> Time (hh:mm) The activity end time. ActivityType<sup>+</sup> Text Send one of the following <ul><li>Check in</li><li>Flight</li><li>Waiting time</li><li>Time at hotel</li><li>Positioning</li><li>Commuting</li><li>Simulator duty</li><li>Ground duty</li><li>Check out</li></ul> Description<sup>+</sup> Text A free text field to explain the activity. TimeReference<sup>+</sup> Number (0-2) Send <ul><li>0 for UTC</li><li>1 for Base</li><li>2 for Local</li></ul> StartAirport<sup>+</sup> Time (hh:mm) The airport at which the activity started. Send ICAO, IATA, or FAA airport codes or a combination of these codes. EndAirport<sup>+</sup> Text The airport at which the activity ended. Send ICAO, IATA, or FAA airport codes or a combination of these codes. Homebase<sup>+</sup> Text The pilot's or the crew member's home airport. Send ICAO, IATA, or FAA airport codes or a combination of these codes. Default value is Start airport code. </p> Username<sup>string</sup> <p>Your Client ID key. You can get the Client ID key from the app. </p> Key<sup>string Required</sup> <p>Your API key. You can get the API key from the app. </p> Overwrite<sup>boolean string</sup> <p>Send <code>true</code> if existing schedule with the same name should be overwritten by this upload</p>"},{"location":"safe_app_api/#example","title":"Example","text":"<pre><code>{\n  \"RosterName\": \"Sample Roster 1\",\n  \"RosterData\": \"Reference,OnDutyDate,OnDutyTime,StartAirport,OffDutyDate,OffDutyTime,EndAirport,HomeBase,TimeReference\\r\\nPilot1,12/05/2010,19:45,SNA,13/05/2010,04:07,RSW,SNA,2\",\n  \"ActivityData\": \"Reference,ActivityStartDate,ActivityStartTime,ActivityEndDate,ActivityEndTime,ActivityType,Description,TimeReference,StartAirport,EndAirport,Homebase\\r\\nPilot1,12/05/2010,19:46,12/05/2010,19:50,Check in,,0,SNA,RSW,SNA\",\n  \"Username\": \"5471E010-DDEE-4C98-FF8F-08DB2245E372\",\n  \"Key\": \"90CBF21C-33D4-4C32-944A-22A0C416DF89\",\n  \"Overwrite\": \"false\"\n}\n</code></pre>"},{"location":"safe_app_api/#for-get-results","title":"For Get Results","text":"<p>The GetResults endpoint doesn't require a request payload. However, you must send values to the following parameters.</p>"},{"location":"safe_app_api/#schema_1","title":"Schema","text":"Parameter Description token The token you received after successfully uploading a Roster dataKey The type of results you want to retrieve. The following values are supported for the dataKey parameter. Send only one value at a time.<ul><li>status</li><li>feedback</li><li>hundredpointalertness</li><li>samnperellialertness</li><li>karolinskaalertness</li><li>karolinskaprobability</li><li>vigilancedegradation</li><li>complexreactiondegradation</li><li>percentagemissedresponses</li><li>sleepperiods</li><li>schedule</li><li>timeabovethreshold</li><li>tableofscheduledetailsids</li></ul>To check the algorithmic results, first set the value of the dataKey parameter to status and check for the response. After the response is completedsuccessfully, start querying for the algorithmic results. key Your API Key"},{"location":"safe_app_api/#response-payload","title":"Response payload","text":"<p>See below for an example. See our API reference documentation or Results breakdown for more information.</p>"},{"location":"safe_app_api/#for-upload-roster_1","title":"For Upload Roster","text":"<pre><code>9e529abf-6b2f-4a17-92de-d1cfc85976db\n</code></pre>"},{"location":"safe_app_api/#for-get-results_1","title":"For Get Results","text":"<pre><code>Reference,Duty,Duty Start,Duty End,Duty Start Date,Duty Start Time,Duty End Date,Duty End Time, 00 - 15 Mins,15 - 30 Mins,30 - 45 Mins,45 - 60 Mins,60 - 75 Mins,75 - 90 Mins,90 - 105 Mins, 105 - 120 Mins,120 - 135 Mins,135 - 150 Mins,150 - 165 Mins,165 - 180 Mins,180 - 195 Mins, 195 - 210 Mins,210 - 225 Mins,225 - 240 Mins,240 - 255 Mins,255 - 270 Mins,270 - 285 Mins,285 - 300 Mins, 300 - 315 Mins,315 - 330 Mins,330 - 345 Mins,345 - 360 Mins,360 - 375 Mins,375 - 390 Mins,390 - 405 Mins, 405 - 420 Mins,420 - 435 Mins,435 - 450 Mins,450 - 465 Mins,465 - 480 Mins,480 - 495 Mins,495 - 510 Mins\nPilot1,KSNA / SNA / N/A - KRSW / RSW / N/A,13/05/2010 02:45,13/05/2010 11:07,13/05/2010,02:45,13/05/2010,11:07,9.11,9.42,9.77,10.16,10.60,11.07,11.58,12.14,12.73,13.36,14.03,14.74,15.49,16.27,17.09,17.95,18.84,19.76,20.70,21.67,22.73,23.65,24.55,25.42,26.82,27.77,28.68,29.56,30.80,31.69,32.54,33.35,34.34,\n</code></pre>"},{"location":"safe_app_api/#results-breakdown","title":"Results breakdown","text":"<p>Each comma-separated number listed from the 8th column, starting from the second row, indicates the fatigue score (based on the scale you chose) at 15-minute intervals. The interval list is based on duty start and end times. The intervals are listed in the first row, also starting from the 8th column.  Compare the score against the description of the scale given in Fatigue and Risk Scales.</p>"},{"location":"safe_swift_api/","title":"SAFE Swift API","text":"<p>This article is designed to show you the workflow for SAFE Application API. Below the diagram you will find the high-level steps to work with API.</p> <p>Refer to our SAFE API reference documentation for more details.</p>"},{"location":"safe_swift_api/#workflow-using-swimlane","title":"Workflow using swimlane","text":""},{"location":"safe_swift_api/#workflow-in-steps","title":"Workflow in steps","text":"<p>Our APIs use the OAuth2.0 Client Credentials workflow. See the steps below:</p>"},{"location":"safe_swift_api/#for-processfatigue","title":"For <code>/ProcessFatigue</code>","text":"<ol> <li> <p>Generate Bearer Token. </p> <ul> <li>the <code>&lt;your_client_id&gt;:&lt;your_client_secret&gt;</code> string is base64 encoded</li> <li>the <code>content-type</code> is <code>x-www-form-urlencoded</code></li> <li>the <code>grant-type</code> is <code>client_credentials</code></li> <li> <p>the <code>scope</code> is <code>frmsc_fast_safe_api</code></p> <p>Manually encoding?</p> <p>Use base64encode.org to encode or decode the string of <code>&lt;Your_ClientID&gt;:&lt;Your_ClientSecret&gt;</code>.</p> Before encodingAfter encodingExample of Authorization header value <pre><code>5471E010-DDEE-4C98-FF8F-08DB2245E373:7rg6Gt+hUiobtXI9Jb37z2vtrhw1CEgDkwFZcMbN5Yc=\n</code></pre> <pre><code>NTQ3MUUwMTAtRERFRS00Qzk4LUZGOEYtMDhEQjIyNDVFMzczOjdyZzZHdCtoVWlvYnRYSTlKYjM3ejJ2dHJodzFDRWdEa3dGWmNNYk41WWM9\n</code></pre> <pre><code>Basic NTQ3MUUwMTAtRERFRS00Qzk4LUZGOEYtMDhEQjIyNDVFMzczOjdyZzZHdCtoVWlvYnRYSTlKYjM3ejJ2dHJodzFDRWdEa3dGWmNNYk41WWM9\n</code></pre> </li> </ul> </li> <li> <p>Use the generated token for Bearer authorization in the <code>/ProcessFatigue</code> endpoint to generate a fatigue scores from the roster data you sent. Ensure:</p> <ul> <li>the mandatory fields are filled.</li> <li>the <code>RosterData</code> field is populated in the correct order.</li> </ul> </li> <li>If you get errors instead of fatigue scores, read the error carefully and resolve the payload errors.</li> <li>If you get expected results, retry sending the request to this endpoint by setting a different scale against <code>PreferredScale</code> property of the payload.</li> </ol>"},{"location":"safe_swift_api/#for-processfatiguerisk","title":"For <code>/ProcessFatigueRisk</code>","text":"<ol> <li> <p>Generate Bearer Token. </p> <ul> <li>the <code>&lt;your_client_id&gt;:&lt;your_client_secret&gt;</code> string is base64 encoded</li> <li>the <code>content-type</code> is <code>x-www-form-urlencoded</code></li> <li>the <code>grant-type</code> is <code>client_credentials</code></li> <li> <p>the scope is <code>frmsc_fast_safe_risk_api</code></p> <p>Manually encoding?</p> <p>Use base64encode.org to encode or decode the string of <code>&lt;Your_ClientID&gt;:&lt;Your_ClientSecret&gt;</code>.</p> Before encodingAfter encodingExample of Authorization header value <pre><code>5471E010-DDEE-4C98-FF8F-08DB2245E373:7rg6Gt+hUiobtXI9Jb37z2vtrhw1CEgDkwFZcMbN5Yc=\n</code></pre> <pre><code>NTQ3MUUwMTAtRERFRS00Qzk4LUZGOEYtMDhEQjIyNDVFMzczOjdyZzZHdCtoVWlvYnRYSTlKYjM3ejJ2dHJodzFDRWdEa3dGWmNNYk41WWM9\n</code></pre> <pre><code>Basic NTQ3MUUwMTAtRERFRS00Qzk4LUZGOEYtMDhEQjIyNDVFMzczOjdyZzZHdCtoVWlvYnRYSTlKYjM3ejJ2dHJodzFDRWdEa3dGWmNNYk41WWM9\n</code></pre> </li> </ul> </li> <li> <p>Use the generated token for Bearer authorization in the <code>/ProcessFatigueRisk</code> endpoint to generate a fatigue and risk scores from the roster data you sent. Ensure:</p> <ul> <li>the mandatory fields are filled.</li> <li>the <code>RosterData</code> field is populated in the correct order.</li> </ul> </li> <li>If you get errors instead of fatigue and risk scores, read the error carefully and resolve the payload errors.</li> <li>If you get expected results, retry sending the request to this endpoint by setting a different scale against <code>PreferredScale</code> property of the payload.</li> </ol>"},{"location":"safe_swift_api/#payload","title":"Payload","text":""},{"location":"safe_swift_api/#request-payload","title":"Request payload","text":"<p>The request payload is the same for both endpoints. Download the an example file for RosterData csv here. See our API reference documentation for more information. </p>"},{"location":"safe_swift_api/#schema","title":"Schema","text":"RosterData<sup>string Required</sup> <p>See the table below for the format of the data. Note:</p> <ul> <li>This property takes comma separated values (csv).</li> <li>The roster data must be in the same order as shown below.</li> <li>You can omit the column titles. In such a case, the order in which the column titles are listed below will be assumed.</li> <li>You can send multiple rows at a time.</li> <li>You can fill in the required columns and delete the others.</li> <li>If you are sending the data to a column that is not required, you must send all columns. The columns without data can be left blank.</li> </ul> <p> ColumnName(<sup>+</sup> required) Format Description Reference<sup>+</sup> Text A free-text field usually used to indicate a pilot. Use pilot's name or ID. OnDutyDate<sup>+</sup> Date (DD/MM/YYYY) The duty start date. OnDutyTime<sup>+</sup> Time (hh:mm) The duty start time. StartAirport<sup>+</sup> Text The airport at which the duty started. Send ICAO, IATA, or FAA airport codes or a combination of these codes. OffDutyDate<sup>+</sup> Date (DD/MM/YYYY) The duty end date. OffDutyTime<sup>+</sup> Time (hh:mm) The duty end time. EndAirport<sup>+</sup> Text The airport at which the duty ended. Send ICAO, IATA, or FAA airport codes or a combination of these codes. Sectors Number The number of flights in duty. Default value is 1. CrewComposition Number Send <ul><li>2 for 2 Pilots</li><li>3 for 3 Pilots</li><li>4 for 4 Pilots</li><li>9 for Cabin Crew</li></ul>Default value is 2. SleepCount Number (0-2) The number of sleeps the pilot or the crew member slept on duty. SleepOrder Number (1-3) The rank, which the pilot or the crew member slept in. Send <ul><li>1 for First</li><li>2 for Second</li><li>3 for Third</li></ul> SleepClass Number (1-5) Send <ul><li>1 for Class 1 - Bunk</li><li>2 for Class 2 - Cabin seat: 40 degrees or more recline</li><li>3 for Class 3 - Flight deck seat</li><li>4 for Class 4 - Economy seat: Less than 40 degrees recline</li><li>5 for Class 5 - Jump seat</li></ul> HomeBase<sup>+</sup> Text Send ICAO, IATA, or FAA airport codes or a combination of these codes. Default value is Start airport code. TimeReference<sup>+</sup> Number (0-2) The reference time zone. Send <ul><li>0 for UTC</li><li>1 for Base airport timezone</li><li>2 for Local timezone</li></ul> OnPartialAugmentDate Date (DD/MM/YYYY) The time on which the pilot or the crew member started their partial agumentation. OnPartialAugmentTime Time (hh:mm) The time at which the pilot or the crew member started their partial agumentation. OffPartialAugmentDate Date (DD/MM/YYYY) The date on which the pilot or the crew member ended their partial agumentation. OffPartialAugmentTime Time (hh:mm) The time at which the pilot or the crew member ended their partial agumentation. FirstRestStartDate Date (DD/MM/YYYY) The date on which the pilot or the crew member started their first rest. FirstRestStartTime Time (hh:mm) The time at which the pilot or the crew member started their first rest. FirstRestEndDate Date (DD/MM/YYYY) The date on which the pilot or the crew member ended their first rest. FirstRestEndTime Time (hh:mm) The time at which the pilot or the crew member ended their first rest. SecondRestStartDate Date (DD/MM/YYYY) The date on which the pilot or the crew member started their second rest. SecondRestStartTime Time (hh:mm) The time at which the pilot or the crew member started their second rest. SecondRestEndDate Date (DD/MM/YYYY) The date on which the pilot or the crew member ended their second rest. SecondRestEndTime Time (hh:mm) The time at which the pilot or the crew member ended their second rest. SplitShift Number (0-1) Indicates whether the pilot or crew member had rested in between flight. Send <ul><li>0 for True</li><li>1 for False</li></ul> DutyType Number (1-3) The type of duty. Send <ul><li>1 for active</li><li>2 for active - split shift</li><li>3 for standby duty</li></ul> Fleet Text A free-text field used to indicate fleet message. Rank Text A free-text field used to indicate a pilot's rank. Workload Number When the sector count is 0, send <ul><li>0 for no activity, i.e. doing nothing but not sleeping</li><li>10 for average workload on a typical single-sector duty. Equivalent to workload prior to being able to change workload</li><li>20 for average workload on a typical four-sector duty</li><li>30 for very high workloads</li><li>40 for exceptionally high workloads only seen occassionally</li><li>50 for extremely high workloads only rarely seen</li></ul>When the sector count is more than 0, send <ul><li>-50 for half the workload of standard flying this number of sectors</li><li>0 for standard duty workloads flying this number of sectors. Equivalent to workload prior to being able to change workload</li><li>100 for double the workload of standard flying this number of sectors</li></ul> CrewPrepTime Number The time taken for crew to prepare. Value indicates minutes. Default value is 60 minutes. DutyCommuteTime Number The time taken to commute to the duty. Value indicates minutes. Default value is 60 minutes. </p> SleepData<sup>string Required</sup> <p>See the table below for the format of the data. Note:</p> <ul> <li>If you provide sleep data, SAFE will not predict sleeps but use the sleep data you have provided. </li> <li>If you are providing sleep data, all fields are mandatory.</li> <li>If you want SAFE to predict sleep, pass an empty array.</li> </ul> <p> ColumnName Format Description ScheduleName string The unique identifier of the pilot or the crew member SleepStart DateTime (Zulu) as string The date and time when the pilot or the crew member started sleeping. The date and time must be in Zulu format. SleepEnd DateTime (Zulu) as string The date and time when the pilot or the crew member ended their sleep. The date and time must be in Zulu format. </p> DateFormat<sup>string Required</sup> <p>The format which is used with the dates present in the roster data. Send only one of the following highlighted value at a time. <ul> <li><code>dmy</code> for DD/MM/YYYY format</li> <li><code>mdy</code> for MM/DD/YYYY format</li> </ul></p> PreferredScale<sup>string Required</sup> <p>The type of scale you want to get the results in. The following values are supported for <code>PreferredScale</code> property. Send only one of the following highlighted value at a time. <ul> <li><code>SP</code> for Samn-Perelli scale</li> <li><code>KSS</code> for Karolinska Sleepiness Scale</li> <li><code>KP</code> for Karolinska Probability scale</li> <li><code>VD</code> for Vigilance Degradation scale</li> <li><code>CRD</code> for Complex Reaction Degradation scale</li> <li><code>PMR</code> for Percentage Missed Responses scale</li> </ul></p>"},{"location":"safe_swift_api/#example","title":"Example","text":"<pre><code>{\n    \"RosterData\": \"Reference,OnDutyDate,OnDutyTime,StartAirport,OffDutyDate,OffDutyTime,EndAirport,HomeBase,TimeReference\\r\\nPilot1,12/05/2023,19:45,SNA,13/05/2023,04:07,RSW,SNA,2\\r\\nPilot1,13/05/2022,00:01,RSW,13/05/2022,20:05,SNA,SNA,2\",\n    \"SleepData\": [\n        {\n        \"ScheduleName\": \"Pilot 1\",\n        \"SleepStart\": \"2023-01-02T19:57:00Z\",\n        \"SleepEnd\": \"2023-01-02T20:30:00Z\"\n        }\n    ],\n    \"DateFormat\": \"dmy\",\n    \"PreferredScale\": \"SP\"\n}\n</code></pre>"},{"location":"safe_swift_api/#response-payload","title":"Response payload","text":"<p>See below for an example. See our API reference documentation or Results breakdown for more information.</p>"},{"location":"safe_swift_api/#for-fatigue-scores","title":"For Fatigue Scores","text":"<pre><code>{\n    \"scheduleScores\": [\n        {\n            \"schedule\": \"Pilot1\",\n            \"fatigueScores\": [\n                5.146,\n                5.026,\n                4.943,\n                4.885,\n                4.809,\n                4.782,\n                4.757,\n                4.683,\n                4.655,\n                4.624,\n                ...\n            ]\n        }\n    ],\n    \"errors\": []\n}\n</code></pre>"},{"location":"safe_swift_api/#for-fatigue-risk-scores","title":"For Fatigue Risk Scores","text":"<pre><code>{\n  \"schedule\": \"Pilot 1\",\n  \"fatigueScores\": [\n    3.402,\n    3.42,\n    3.445,\n    3.475,\n    3.507,\n    3.54,\n    3.574,\n    3.606,\n    3.638,\n    3.668,\n    3.696,\n    3.722,\n    3.746,\n    3.768,\n    3.787,\n    3.804,\n    3.819,\n    3.831,\n    3.839,\n    3.847,\n    3.852,\n    \"...\"\n  ],\n  \"riskScores\": [\n    12.7382,\n    16.520624336581236\n  ]\n}\n</code></pre>"},{"location":"safe_swift_api/#results-breakdown","title":"Results breakdown","text":"<p>Each comma-separated number under <code>fatigueScores</code> property indicates the fatigue score (based on the scale you chose) at 15-minute intervals. The interval list is based on duty start and end times. Compare the score against the description of the scale given in Fatigue and Risk Scales.</p> <p>Risk scores are part of our proprietary solution and we will train you to read those scores during the onboarding process. On a high-level, the Risk scores are dependent on the number of duties per each employee. If the roster data had two duties for an employee, there would be 2 risk scores for that employee. You can learn more about Risk Scales in Fatigue and Risk Scales.</p>"},{"location":"uiworkflow/","title":"SAFE Web UI Workflow","text":"<p>There are two ways to upload roster to FRMSc's SAFE and CARE models from within the web portal - individual entry and bulk upload. This guide will walk you through both those approaches in detail.</p>"},{"location":"uiworkflow/#individual-entry","title":"Individual entry","text":"<p>Individual entry is one of the easiest way to submit data to FRMSc SAFE. The step-by-step wizard will allow you to enter the roster data, limiting errors during data input. To manually submit individual roster entry into FRMSc SAFE web UI, follow the steps below:</p> <ol> <li>Login to FRMSc web app and navigate to Rosters menu from the left menu panel. </li> <li>Click + Create roster</li> <li>Click Construct manually </li> <li>The Create Roster form will appear. Enter relevant values in the available fields. Refer to the Table of Fields section below for more information.</li> <li>Click Next</li> <li>The Create Schedule form will appear. Enter relevant values in the available fields. Refer to the Table of Fields section below for more information.</li> <li>Click Submit.</li> <li>The Create Duty form will appear. Enter relevant values in the available fields. Refer to the Table of Fields section below for more information.</li> <li>Click Create</li> <li>The Fatigue chart will start showing immediately. To add more duties to a schedule, right click on the day and select Create Duty. Repeat Step 8 to create duty.To add additional schedules for more personnel, click + Create Schedule located above the chart.</li> <li>Right click on the duty and select Activities to start adding activities to the duty.</li> <li>The Activities pop-up form will appear. Click on the + icon.</li> <li>The Create Activity form will appear. Enter relevant values in the available fields. Refer to the Table of Fields section below for more information.</li> <li>Click Create and close the Activities pop-up. The Fatigue chart will update. Continue adding more activities and duty to refine the results.</li> </ol>"},{"location":"uiworkflow/#bulk-upload","title":"Bulk upload","text":"<p>Example CSV or Microsoft Excel (.xlsx) files</p> <p>Download the example files for Duty (csv and .xlsx) and Activities (csv and .xlsx) here. You can also download them from our web app. The screen following the Create Roster form lets you download the template and view the specification for the CSV file including the mandatory columns and their order. </p> <p>Alternatively, you can view the order and column names of the files in the Duty File Specification and the Activity File Specification sections.</p> <p>Bulk entry is one of the fastest way to submit data to SAFE and CARE using the web UI. Using the CSV or Microsoft Excel file, you can submit multiple schedules data at once, reducing the time taken to enter the data manually. To submit bulk roster entries into SAFE web UI, follow the steps below:</p> Construct with duties onlyConstruct with duties and activities <ol> <li> <p>Login to FRMSc web app and navigate to Rosters menu from the left menu panel. </p> </li> <li> <p>Click + Create roster</p> </li> <li>Click Construct with duties only </li> <li>The file explorer opens. Navigate to the location of the CSV or Microsoft Excel (.xlsx) file that has roster data with duties and select it.</li> <li>The Create Roster form will appear. Enter relevant values in the available fields. Refer to the Table of Fields section below for more information.</li> <li>Click Next</li> <li>The roster data will start processing. <ul> <li>If any errors or warnings are found on the file, they will be listed at the bottom of the Process roster screen. You will also receive an email notification with the list of errors you need to resolve. </li> <li>Resolve the errors and warnings and upload again or view the schedules to fix the errors using the web UI. </li> </ul> </li> <li>After the processing is complete, a fly-out banner will appear on the top right of the screen. You will also receive an email notification to indicate successful completion. Click<ul> <li>View roster summary to view roster summary</li> <li>View schedules to view the schedules and fatigue charts  </li> </ul> </li> </ol> <ol> <li> <p>Login to FRMSc web app and navigate to Rosters menu from the left menu panel. </p> </li> <li> <p>Click + Create roster</p> </li> <li>Click Construct with duties and activities </li> <li>The file explorer opens. Navigate to the location of the CSV or Microsoft Excel (.xlsx) file that has roster data with duties and select it.</li> <li>The Activity upload dialog appears. Click Ok to continue.</li> <li>The file explorer opens. Naviagate to the location of the CSV or Microsoft Excel (.xlsx) file that has roster data with activites and select it.</li> <li>The Create Roster form will appear. Enter relevant values in the available fields. Refer to the Table of Fields section below for more information.</li> <li>Click Next</li> <li>The roster data will start processing. <ul> <li>If any errors or warnings are found on the file, they will be listed at the bottom of the Process roster screen. You will also receive an email notification with the list of errors you need to resolve. </li> <li>Resolve the errors and warnings and upload again or view the schedules to fix the errors using the web UI. </li> </ul> </li> <li>After the processing is complete, a fly-out banner will appear on the top right of the screen. You will also receive an email notification to indicate successful completion. Click<ul> <li>View roster summary to view roster summary</li> <li>View schedules to view the schedules and fatigue charts  </li> </ul> </li> </ol>"},{"location":"uiworkflow/#table-of-fields","title":"Table of Fields","text":""},{"location":"uiworkflow/#create-roster","title":"Create Roster","text":"Field name (* required) Description Name<sup>*</sup> The name of the schedule. Usually the identifer of the pilot or the crew member e.g., employee number Visibility If other users should not be able to see the roster, choose Private else choose  Public Tags The label attached to the Roster which can be used to group rosters together."},{"location":"uiworkflow/#create-schedule","title":"Create Schedule","text":"Field name (* required) Description Name<sup>*</sup> The name of the schedule. Usually the name of the pilot or the crew memeber. Rank A label for indicating the rank of the pilot or the crew member. Base Airport<sup>*</sup> The homebase airport of the pilot or the crew member. Type ICAO, IATA, or FAA airport codes and choose the airport from the drop down.  Preparation time The time required to prepare after waking from a main sleep. Crew Type<sup>*</sup> The type of personnel. Choose between Pilot or Cabin crew."},{"location":"uiworkflow/#create-duty","title":"Create Duty","text":"Field name (* required) Description Duty type<sup>*</sup> Choose the type of duty from the dropdown. Crew composition Select the number of pilots in the flight from the dropdown or select 9 for cabin crew. On duty date and time<sup>*</sup> The duty start date. Use the date time controls to set the date and time. Off duty date and time<sup>*</sup> The duty end date. Use the date time controls to set the date and time. Time references<sup>*</sup> The time zone which the duty times are based on. Check the box that indicates the timezone. Start Airport<sup>*</sup> The airport where the duty started. Default is the base airport. To change the airport, type ICAO, IATA, or FAA airport codes and choose the airport from the drop down. End Airport<sup>*</sup> The airport where the duty ended. Default is the base airport. To change the airport, type ICAO, IATA, or FAA airport codes and choose the airport from the drop down. Commute Time Select the time taken to commute to the duty. Default value is 1 hour. Fleet A label you can use to indicate the aircraft being used. Sector Count Select the number of flights in the duty. Default value is 1. Workload Move the seeker bar horizontally to increase or decrease the workload in percentage increments (decrement) from the normal workload (workload=0) for the duty. Workload can be increased up to 100% of the normal workload (100= twice the normal workload level) or decreased by 50% of normal workload  (-50 = half the normal workload)"},{"location":"uiworkflow/#create-activity","title":"Create Activity","text":"Field name (* required) Description Activity type<sup>*</sup> Choose the type of activity from the dropdown. Description Add a short description about or comment on the activity. Activity start date and time<sup>*</sup> The activity start date. Use the date time controls to set the date and time. Activity end date and time<sup>*</sup> The activity end date. Use the date time controls to set the date and time. Time references<sup>*</sup> The time zone which the duty times are based on. Check the box that indicates the timezone. Nearest airport<sup>*</sup> The departure airport. This value is derived from your duty's End Airport field. You can not change this field."},{"location":"uiworkflow/#duty-file-specification","title":"Duty File Specification","text":"<p>The table below shows a list of columns you can include in the CSV or Microsoft Excel file. The columns must be in the same order as listed below.You can omit the column titles. In such case, the order in which the column titles are listed below will be assumed. You can send multiple rows at a time.</p> ColumnName(<sup>+</sup> required) Format Description Reference<sup>+</sup> Text A free-text field usually used to indicate a pilot. Use pilot's name or ID. OnDutyDate<sup>+</sup> Date (DD/MM/YYYY) The duty start date. OnDutyTime<sup>+</sup> Time (hh:mm) The duty start time. StartAirport<sup>+</sup> Text The airport at which the duty started. Send ICAO, IATA, or FAA airport codes or a combination of these codes. OffDutyDate<sup>+</sup> Date (DD/MM/YYYY) The duty end date. OffDutyTime<sup>+</sup> Time (hh:mm) The duty end time. EndAirport<sup>+</sup> Text The airport at which the duty ended. Send ICAO, IATA, or FAA airport codes or a combination of these codes. Sectors Number The number of flights in duty. Default value is 1. CrewComposition Number Send <ul><li>2 for 2 Pilots</li><li>3 for 3 Pilots</li><li>4 for 4 Pilots</li><li>9 for Cabin Crew</li></ul>Default value is 2. SleepCount Number (0-2) The number of sleeps the pilot or the crew member slept on duty. SleepOrder Number (1-3) The rank, which the pilot or the crew member slept in. Send <ul><li>1 for First</li><li>2 for Second</li><li>3 for Third</li></ul> SleepClass Number (1-5) Send <ul><li>1 for Class 1 - Bunk</li><li>2 for Class 2 - Cabin seat: 40 degrees or more recline</li><li>3 for Class 3 - Flight deck seat</li><li>4 for Class 4 - Economy seat: Less than 40 degrees recline</li><li>5 for Class 5 - Jump seat</li></ul> HomeBase<sup>+</sup> Text Send ICAO, IATA, or FAA airport codes or a combination of these codes. Default value is Start airport code. TimeReference<sup>+</sup> Number (0-2) The reference time zone. Send <ul><li>0 for UTC</li><li>1 for Base airport timezone</li><li>2 for Local timezone</li></ul> OnPartialAugmentDate Date (DD/MM/YYYY) The time on which the pilot or the crew member started their partial agumentation. OnPartialAugmentTime Time (hh:mm) The time at which the pilot or the crew member started their partial agumentation. OffPartialAugmentDate Date (DD/MM/YYYY) The date on which the pilot or the crew member ended their partial agumentation. OffPartialAugmentTime Time (hh:mm) The time at which the pilot or the crew member ended their partial agumentation. FirstRestStartDate Date (DD/MM/YYYY) The date on which the pilot or the crew member started their first rest. FirstRestStartTime Time (hh:mm) The time at which the pilot or the crew member started their first rest. FirstRestEndDate Date (DD/MM/YYYY) The date on which the pilot or the crew member ended their first rest. FirstRestEndTime Time (hh:mm) The time at which the pilot or the crew member ended their first rest. SecondRestStartDate Date (DD/MM/YYYY) The date on which the pilot or the crew member started their second rest. SecondRestStartTime Time (hh:mm) The time at which the pilot or the crew member started their second rest. SecondRestEndDate Date (DD/MM/YYYY) The date on which the pilot or the crew member ended their second rest. SecondRestEndTime Time (hh:mm) The time at which the pilot or the crew member ended their second rest. SplitShift Number (0-1) Indicates whether the pilot or crew member had rested in between flight. Send <ul><li>0 for True</li><li>1 for False</li></ul> DutyType Number (1-3) The type of duty. Send <ul><li>1 for active</li><li>2 for active - split shift</li><li>3 for standby duty</li></ul> Fleet Text A free-text field used to indicate fleet message. Rank Text A free-text field used to indicate a pilot's rank. Workload Number When the sector count is 0, send <ul><li>0 for no activity, i.e. doing nothing but not sleeping</li><li>10 for average workload on a typical single-sector duty. Equivalent to workload prior to being able to change workload</li><li>20 for average workload on a typical four-sector duty</li><li>30 for very high workloads</li><li>40 for exceptionally high workloads only seen occassionally</li><li>50 for extremely high workloads only rarely seen</li></ul>When the sector count is more than 0, send <ul><li>-50 for half the workload of standard flying this number of sectors</li><li>0 for standard duty workloads flying this number of sectors. Equivalent to workload prior to being able to change workload</li><li>100 for double the workload of standard flying this number of sectors</li></ul> CrewPrepTime Number The time taken for crew to prepare. Value indicates minutes. Default value is 60 minutes. DutyCommuteTime Number The time taken to commute to the duty. Value indicates minutes. Default value is 60 minutes."},{"location":"uiworkflow/#activity-file-specification","title":"Activity File Specification","text":"<p>The table below shows a list of columns you can include in the CSV or Microsoft Excel file. The columns must be in the same order as listed below.You can omit the column titles. In such case, the order in which the column titles are listed below will be assumed.</p> ColumnName(<sup>+</sup> required) Format Description Reference<sup>+</sup> Text A free-text field usually used to indicate a Activity. Use pilot's name or ID. ActivityStartDate<sup>+</sup> Date (DD/MM/YYYY) The activity start date. ActivityStartTime<sup>+</sup> Time (hh:mm) The activity start time. ActivityEndDate<sup>+</sup> Date (DD/MM/YYYY) The activity end date. ActivityEndTime<sup>+</sup> Time (hh:mm) The activity end time. ActivityType<sup>+</sup> Text Send one of the following <ul><li>Check in</li><li>Flight</li><li>Waiting time</li><li>Time at hotel</li><li>Positioning</li><li>Commuting</li><li>Simulator duty</li><li>Ground duty</li><li>Check out</li></ul> Description<sup>+</sup> Text A free text field to explain the activity. TimeReference<sup>+</sup> Number (0-2) Send <ul><li>0 for UTC</li><li>1 for Base</li><li>2 for Local</li></ul> StartAirport<sup>+</sup> Time (hh:mm) The airport at which the activity started. Send ICAO, IATA, or FAA airport codes or a combination of these codes. EndAirport<sup>+</sup> Text The airport at which the activity ended. Send ICAO, IATA, or FAA airport codes or a combination of these codes. Homebase<sup>+</sup> Text The pilot's or the crew member's home airport. Send ICAO, IATA, or FAA airport codes or a combination of these codes. Default value is Start airport code."},{"location":"upload_api_tutorial/","title":"How to use SAFE Upload API?","text":"<p>Download the C#.NET examples for SAFE APIs with helper library</p>"},{"location":"upload_api_tutorial/#when-to-use-safe-application-api","title":"When to use SAFE Application API?","text":"<p>SAFE Application API keeps a copy of your uploaded roster data in the SAFE web app so that you can return to it at any time and analyze the results visually. You should use this API if you want the roster data to be preserved in the SAFE web app.</p>"},{"location":"upload_api_tutorial/#how-to-work-with-the-api","title":"How to work with the API?","text":"<p>This code snippet is written in C# and it is used to upload roster data to the FRMSC SAFE Application API and get results from the API. The program uses the following libraries: </p> <ul> <li><code>IdentityModel.Client</code></li> <li><code>Newtonsoft.Json</code></li> <li><code>Safe_API_Demo_Client.Models</code></li> <li><code>System.Text</code> </li> </ul> <p>Here are the steps to follow. </p>"},{"location":"upload_api_tutorial/#step-1-generate-a-token","title":"Step 1: Generate a token","text":"<p>Generate a Bearer token to use with this endpoint. Follow the instructions given in How to generate a Bearer token? tutorial to generate a bearer token.</p>"},{"location":"upload_api_tutorial/#step-2-upload-the-roster-data","title":"Step 2: Upload the roster data","text":"<p>Follow the instructions below to upload the roster data. This code sends <code>HTTP POST</code> request to a web API endpoint.</p>"},{"location":"upload_api_tutorial/#step-1-set-the-variable-values","title":"Step 1: Set the variable values","text":"<p>Set the values of <code>apiKey</code>, <code>accessToken</code>, <code>rosterCSV</code>, and <code>clientId</code> variables. </p> <pre><code>var apiKey = \"[Your_APIKey]\";\nvar apiUrl = \"https://web-eu.frmsc.com\";\nvar accessToken = \"[Your_Accesstoken]\";\nvar rosterCsv = File.ReadAllText(\"SampleRosters\\\\ExampleRosterUpload.csv\");\nvar clientId = \"[Your_ClientId]\";\n</code></pre> <p>You can get <code>apiKey</code> and <code>clientId</code> from the web app, and you can get the <code>accessToken</code> from the previous step.  </p> <p>The <code>rosterCSV</code> variable is set to read the roster data from a CSV file. Set the parameter value of the <code>File.ReadAllText()</code> function to the location of the CSV file with the roster data.</p>"},{"location":"upload_api_tutorial/#step-2-initiate-request","title":"Step 2: Initiate request","text":"<p>Create an HTTP client and set the base address to the API URL. Then, create an HTTP request message with the HTTP method set to POST and the endpoint set to <code>/api/UploadRoster</code>. The request message should also include the <code>authorization</code> header with the access token.</p> <pre><code>HttpClient client = new HttpClient();\nclient.BaseAddress = new Uri(apiUrl);\n\nvar request = new HttpRequestMessage(HttpMethod.Post, \"/api/UploadRoster\");\n\nrequest.Version = new Version(2, 0);\nrequest.Headers.Add(\"authorization\", $\"Bearer {accessToken}\");\n</code></pre>"},{"location":"upload_api_tutorial/#step-3-prepare-request-body","title":"Step 3: Prepare request body","text":"<p>Create an instance of the <code>UploadRequest</code> class and sets its properties. </p> <pre><code>var uploadRequest = new UploadRequest\n{\n    RosterName = \"Sample SAFE Application API post\",\n    RosterData = rosterCsv,\n    Username = clientId,\n    Key = apiKey,\n    Overwrite = false\n};\n</code></pre> <p>The <code>UploadRequest</code> class has four properties.</p> <ul> <li><code>RosterName</code></li> <li><code>RosterData</code></li> <li><code>Username</code></li> <li><code>Key</code> </li> </ul> <p>Provide a name for the roster through the <code>RosterName</code> property. In the following code example, the <code>RosterName</code> property is set to <code>Sample SAFE Application API post</code>. </p> <p>Set the RosterData property to refer to <code>rosterCsv</code> and the <code>Username</code> property to <code>clientId</code> variables. The <code>Key</code> property must refer to <code>apiKey</code>. </p> <p>Leave the <code>Overwrite</code> property as <code>false</code>, if you want to create a new roster. To overwrite an existing roster with the same name, set the value of the <code>Overwrite</code> property to <code>true</code>.</p>"},{"location":"upload_api_tutorial/#step-4-make-the-request","title":"Step 4: Make the request","text":"<p>Serialize the <code>UploadRequest</code> object to JSON and set the request message content to the serialized JSON. Send the request message to the API and wait for it to return a roster token.</p> <pre><code>request.Content = new StringContent(JsonConvert.SerializeObject(uploadRequest), Encoding.UTF8, \"application/json\");                  \n\nvar response = await client.SendAsync(request);\nreturn await response.Content.ReadAsStringAsync();\n</code></pre>"},{"location":"upload_api_tutorial/#step-3-generate-result","title":"Step 3: Generate result","text":"<p>Follow the instructions below to upload the roster data. This code sends <code>HTTP GET</code> request to a web API endpoint.</p>"},{"location":"upload_api_tutorial/#step-1-set-the-variable-values_1","title":"Step 1: Set the variable values","text":"<p>Set the values of <code>rosterToken</code> and <code>dataKey</code> variables. </p> <pre><code>var rosterToken = \"&lt;roster_token_generated_by_UploadRoster_endpoint&gt;\";\nvar dataKey = \"status\";\n</code></pre> <p>You can get <code>rosterToken</code> from Step 4: Make the request. The dataKey variable is set to <code>status</code> initially to ensure that the roster data you uploaded previously was completed successfully. See Step 4: Retry with different <code>dataKey</code></p>"},{"location":"upload_api_tutorial/#step-2-initiate-request_1","title":"Step 2: Initiate request","text":"<p>Create a query string using the variables set in Step 1: Set the variable values, including the <code>apiKey</code> variable. Then, create an HTTP request message with the HTTP method set to GET and the endpoint set to <code>/api/GetResults</code>. The request message should also include the <code>authorization</code> header with the access token.</p> <p>Set the Version property of the <code>HttpRequestMessage</code> object is set to <code>2.0</code> to indicate that the request should use <code>HTTP/2.0</code>.</p> <pre><code>var queryString = string.Format(\"?token={0}&amp;key={1}&amp;dataKey={2}\", rosterToken, apiKey, dataKey);\nvar request = new HttpRequestMessage(HttpMethod.Get, \"/api/GetResults\" + queryString);\nrequest.Version = new Version(2, 0);\nrequest.Headers.Add(\"authorization\", $\"Bearer {accessToken}\");\n</code></pre>"},{"location":"upload_api_tutorial/#step-3-make-the-request","title":"Step 3: Make the request","text":"<p>Use the <code>SendAsync</code> method of the <code>HttpClient</code> object to send the request, and the <code>ReadAsStringAsync</code> method of the <code>HttpContent</code> object to read the response content as a string.</p> <pre><code>var response = await client.SendAsync(request);\nreturn await response.Content.ReadAsStringAsync();\n</code></pre>"},{"location":"upload_api_tutorial/#step-4-retry-with-different-datakey","title":"Step 4: Retry with different <code>dataKey</code>","text":"<p>There are two workflows for this step depending on the response you receive from the previous step.</p> Response is not <code>completedsuccessfully</code>Response is <code>completedsuccessfully</code> <p>If the response from the previous step is not <code>completedsuccessfully</code>, set the value of <code>dataKey</code> parameter to <code>feedback</code> in Step 1: Set the variable values and retry sending the request to learn more about the problem.</p> <p>Resolve any error in the roster data file. Then, return to Step 2: Upload the roster data. Keep the <code>RosterName</code> same and set the value of <code>Overwrite</code> field to <code>true</code> to resubmit the roster data.</p> <p>If the status is <code>completedsuccessfully</code>, set the value of <code>dataKey</code> parameter to the type of result you want to receive and submit. The following values are supported for the dataKey parameter. Send only one value at a time.</p> <p><ul> <li>status</li> <li>feedback</li> <li>hundredpointalertness</li> <li>samnperellialertness</li> <li>karolinskaalertness</li> <li>karolinskaprobability</li> <li>vigilancedegradation</li> <li>complexreactiondegradation</li> <li>percentagemissedresponses</li> <li>sleepperiods</li> <li>schedule</li> <li>timeabovethreshold</li> <li>tableofscheduledetailsids</li> </ul></p>"},{"location":"upload_api_tutorial/#complete-code","title":"Complete Code","text":"<pre><code>using IdentityModel.Client;\nusing Newtonsoft.Json;\nusing Safe_API_Demo_Client.Models;\nusing System.Text;\n\nnamespace Safe_API_Demo_Client\n{\n    public static class UploadApi\n    {\n        public static async void Run()\n        {\n            var identityUrl = \"https://identity-eu.frmsc.com\";\n            var apiUrl = @\"https://web-eu.frmsc.com\";\n            var apiKey = \"[Your_ApKey]\";\n            var clientId = \"[Your_ClientId]\";\n            var clientSecret = \"[your_ClientSecret]\";\n\n            var rosterCsv = File.ReadAllText(\"SampleRosters\\\\ExampleRosterUpload.csv\");\n\n            var accessToken = await Authenticate(identityUrl, clientId, clientSecret, \"frmsc_safe_upload_api\");\n\n            if (accessToken == null) { return; }\n\n            var rosterToken = await Upload(apiUrl, apiKey, accessToken, rosterCsv, clientId);\n\n            Console.WriteLine(\"Acquired token: \" + rosterToken);\n\n            while (await GetResults(apiUrl, apiKey, accessToken, rosterToken, \"Status\") == \"processing\")\n            {                \n                Console.WriteLine(\"Roster still being processed....\");\n                Thread.Sleep(2000);                \n            }\n\n            var feedback = await GetResults(apiUrl, apiKey, accessToken, rosterToken, \"Feedback\");\n            Console.WriteLine(\"Feedback: {0}\", feedback);\n\n            var schedules = await GetResults(apiUrl, apiKey, accessToken, rosterToken, \"TableOfScheduleDetailsIds\");\n            Console.WriteLine(\"Schedules: {0}\", schedules);\n\n            Console.WriteLine(\"Downloading 100pt scale alertness data\");\n            var hundredPointAlertness = await GetResults(apiUrl, apiKey, accessToken, rosterToken, \"HundredPointAlertness\");\n            File.WriteAllText(\"Output\\\\hundredPointAlertnessData.csv\", hundredPointAlertness);\n\n            Console.WriteLine(\"Downloading Samn Perelli scale alertness data\");\n            var samnPerelliAlertness = await GetResults(apiUrl, apiKey, accessToken, rosterToken, \"SamnPerelliAlertness\");\n            File.WriteAllText(\"Output\\\\samnPerelliAlertnessData.csv\", samnPerelliAlertness);\n\n            Console.WriteLine(\"Downloading Karolinska Alertness scale alertness data\");\n            var karolinskaAlertness = await GetResults(apiUrl, apiKey, accessToken, rosterToken, \"KarolinskaAlertness\");\n            File.WriteAllText(\"Output\\\\karolinskaAlertnessData.csv\", karolinskaAlertness);\n\n            Console.WriteLine(\"Downloading Karolinska Probability scale alertness data\");\n            var karolinskaProbability = await GetResults(apiUrl, apiKey, accessToken, rosterToken, \"KarolinskaProbability\");\n            File.WriteAllText(\"Output\\\\karolinskaProbabilityAlertnessData.csv\", karolinskaProbability);\n\n            Console.WriteLine(\"Downloading Vigilance Degradation scale alertness data\");\n            var vigilanceDegradation = await GetResults(apiUrl, apiKey, accessToken, rosterToken, \"VigilanceDegradation\");\n            File.WriteAllText(\"Output\\\\vigilanceDegradationAlertnessData.csv\", vigilanceDegradation);\n\n            Console.WriteLine(\"Downloading Complex Reaction Degradation scale alertness data\");\n            var complexReactionDegradation = await GetResults(apiUrl, apiKey, accessToken, rosterToken, \"ComplexReactionDegradation\");\n            File.WriteAllText(\"Output\\\\complexReactionDegradationAlertnessData.csv\", complexReactionDegradation);\n\n            Console.WriteLine(\"Downloading Percentage Missed Responses scale alertness data\");\n            var percentageMissedResponses = await GetResults(apiUrl, apiKey, accessToken, rosterToken, \"PercentageMissedResponses\");\n            File.WriteAllText(\"Output\\\\percentageMissedResponses.csv\", percentageMissedResponses);\n\n            Console.WriteLine(\"Downloading sleep periods data\");\n            var sleepPeriods = await GetResults(apiUrl, apiKey, accessToken, rosterToken, \"SleepPeriods\");\n            File.WriteAllText(\"Output\\\\sleepPeriodData.csv\", sleepPeriods);\n\n            Console.WriteLine(\"Downloading schedule data\");\n            var schedule = await GetResults(apiUrl, apiKey, accessToken, rosterToken, \"Schedule\");\n            File.WriteAllText(\"Output\\\\scheduleData.csv\", schedule);\n\n            Console.WriteLine(\"Downloading time above threshold data\");\n            var timeAboveThreshold = await GetResults(apiUrl, apiKey, accessToken, rosterToken, \"TimeAboveThreshold\");\n            File.WriteAllText(\"Output\\\\timeAboveThresholdData.csv\", timeAboveThreshold);\n        }\n\n        static async Task&lt;string&gt; Upload(string apiUrl, string apiKey, string accessToken, string rosterCsv,  string clientId)\n        {\n            HttpClient client = new HttpClient();\n            client.BaseAddress = new Uri(apiUrl);\n\n            var request = new HttpRequestMessage(HttpMethod.Post, \"/api/UploadRoster\");\n\n            request.Version = new Version(2, 0);\n            request.Headers.Add(\"authorization\", $\"Bearer {accessToken}\");\n\n            var uploadRequest = new UploadRequest\n            {\n                RosterName = \"Sample roster API post\",\n                RosterData = rosterCsv,\n                Username = clientId,\n                Key = apiKey,\n                Overwrite = false\n            };\n\n            request.Content = new StringContent(JsonConvert.SerializeObject(uploadRequest), Encoding.UTF8, \"application/json\");                  \n\n            var response = await client.SendAsync(request);\n            return await response.Content.ReadAsStringAsync();\n        }\n\n        static async Task&lt;string&gt; Authenticate(string identityUrl, string clientId, string clientSecret, string scope)\n        {\n            HttpClient client = new HttpClient();\n            client.BaseAddress = new Uri(identityUrl);\n\n            var openIdDiscoveryDocument = client.GetDiscoveryDocumentAsync(identityUrl).GetAwaiter().GetResult();\n\n            var request = new ClientCredentialsTokenRequest\n            {\n                Address = openIdDiscoveryDocument.TokenEndpoint,\n\n                ClientId = clientId,\n                ClientSecret = clientSecret,\n                Scope = scope\n            };\n\n            var tokenResponse = await client.RequestClientCredentialsTokenAsync(request);\n            if (tokenResponse != null)\n            {\n                return tokenResponse.AccessToken;\n            }\n            else\n            {\n                Console.WriteLine(\"Authentication failed\");\n                throw new Exception(\"Authentication failed\");\n            }\n        }\n\n        static async Task&lt;string&gt; GetResults(string apiUrl, string apiKey, string accessToken, string rosterToken, string dataKey) {\n            HttpClient client = new HttpClient();\n            client.BaseAddress = new Uri(apiUrl);\n\n            var queryString = string.Format(\"?token={0}&amp;key={1}&amp;dataKey={2}\", rosterToken, apiKey, dataKey);\n\n            var request = new HttpRequestMessage(HttpMethod.Get, \"/api/GetResults\" + queryString);\n\n            request.Version = new Version(2, 0);\n            request.Headers.Add(\"authorization\", $\"Bearer {accessToken}\");\n\n            var response = await client.SendAsync(request);\n            return await response.Content.ReadAsStringAsync();\n        }\n    }\n}\n</code></pre>"}]}